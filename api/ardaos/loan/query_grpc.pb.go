// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ardaos/loan/query.proto

package loan

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                 = "/ardaos.loan.Query/Params"
	Query_LoanState_FullMethodName              = "/ardaos.loan.Query/LoanState"
	Query_LoanStateAll_FullMethodName           = "/ardaos.loan.Query/LoanStateAll"
	Query_CreditCardMetadata_FullMethodName     = "/ardaos.loan.Query/CreditCardMetadata"
	Query_CreditCardMetadataAll_FullMethodName  = "/ardaos.loan.Query/CreditCardMetadataAll"
	Query_McaMetadata_FullMethodName            = "/ardaos.loan.Query/McaMetadata"
	Query_McaMetadataAll_FullMethodName         = "/ardaos.loan.Query/McaMetadataAll"
	Query_InstallmentMetadata_FullMethodName    = "/ardaos.loan.Query/InstallmentMetadata"
	Query_InstallmentMetadataAll_FullMethodName = "/ardaos.loan.Query/InstallmentMetadataAll"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of LoanState items.
	LoanState(ctx context.Context, in *QueryGetLoanStateRequest, opts ...grpc.CallOption) (*QueryGetLoanStateResponse, error)
	LoanStateAll(ctx context.Context, in *QueryAllLoanStateRequest, opts ...grpc.CallOption) (*QueryAllLoanStateResponse, error)
	// Queries a list of CreditCardMetadata items.
	CreditCardMetadata(ctx context.Context, in *QueryGetCreditCardMetadataRequest, opts ...grpc.CallOption) (*QueryGetCreditCardMetadataResponse, error)
	CreditCardMetadataAll(ctx context.Context, in *QueryAllCreditCardMetadataRequest, opts ...grpc.CallOption) (*QueryAllCreditCardMetadataResponse, error)
	// Queries a list of McaMetadata items.
	McaMetadata(ctx context.Context, in *QueryGetMcaMetadataRequest, opts ...grpc.CallOption) (*QueryGetMcaMetadataResponse, error)
	McaMetadataAll(ctx context.Context, in *QueryAllMcaMetadataRequest, opts ...grpc.CallOption) (*QueryAllMcaMetadataResponse, error)
	// Queries a list of InstallmentMetadata items.
	InstallmentMetadata(ctx context.Context, in *QueryGetInstallmentMetadataRequest, opts ...grpc.CallOption) (*QueryGetInstallmentMetadataResponse, error)
	InstallmentMetadataAll(ctx context.Context, in *QueryAllInstallmentMetadataRequest, opts ...grpc.CallOption) (*QueryAllInstallmentMetadataResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LoanState(ctx context.Context, in *QueryGetLoanStateRequest, opts ...grpc.CallOption) (*QueryGetLoanStateResponse, error) {
	out := new(QueryGetLoanStateResponse)
	err := c.cc.Invoke(ctx, Query_LoanState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LoanStateAll(ctx context.Context, in *QueryAllLoanStateRequest, opts ...grpc.CallOption) (*QueryAllLoanStateResponse, error) {
	out := new(QueryAllLoanStateResponse)
	err := c.cc.Invoke(ctx, Query_LoanStateAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CreditCardMetadata(ctx context.Context, in *QueryGetCreditCardMetadataRequest, opts ...grpc.CallOption) (*QueryGetCreditCardMetadataResponse, error) {
	out := new(QueryGetCreditCardMetadataResponse)
	err := c.cc.Invoke(ctx, Query_CreditCardMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CreditCardMetadataAll(ctx context.Context, in *QueryAllCreditCardMetadataRequest, opts ...grpc.CallOption) (*QueryAllCreditCardMetadataResponse, error) {
	out := new(QueryAllCreditCardMetadataResponse)
	err := c.cc.Invoke(ctx, Query_CreditCardMetadataAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) McaMetadata(ctx context.Context, in *QueryGetMcaMetadataRequest, opts ...grpc.CallOption) (*QueryGetMcaMetadataResponse, error) {
	out := new(QueryGetMcaMetadataResponse)
	err := c.cc.Invoke(ctx, Query_McaMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) McaMetadataAll(ctx context.Context, in *QueryAllMcaMetadataRequest, opts ...grpc.CallOption) (*QueryAllMcaMetadataResponse, error) {
	out := new(QueryAllMcaMetadataResponse)
	err := c.cc.Invoke(ctx, Query_McaMetadataAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InstallmentMetadata(ctx context.Context, in *QueryGetInstallmentMetadataRequest, opts ...grpc.CallOption) (*QueryGetInstallmentMetadataResponse, error) {
	out := new(QueryGetInstallmentMetadataResponse)
	err := c.cc.Invoke(ctx, Query_InstallmentMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InstallmentMetadataAll(ctx context.Context, in *QueryAllInstallmentMetadataRequest, opts ...grpc.CallOption) (*QueryAllInstallmentMetadataResponse, error) {
	out := new(QueryAllInstallmentMetadataResponse)
	err := c.cc.Invoke(ctx, Query_InstallmentMetadataAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of LoanState items.
	LoanState(context.Context, *QueryGetLoanStateRequest) (*QueryGetLoanStateResponse, error)
	LoanStateAll(context.Context, *QueryAllLoanStateRequest) (*QueryAllLoanStateResponse, error)
	// Queries a list of CreditCardMetadata items.
	CreditCardMetadata(context.Context, *QueryGetCreditCardMetadataRequest) (*QueryGetCreditCardMetadataResponse, error)
	CreditCardMetadataAll(context.Context, *QueryAllCreditCardMetadataRequest) (*QueryAllCreditCardMetadataResponse, error)
	// Queries a list of McaMetadata items.
	McaMetadata(context.Context, *QueryGetMcaMetadataRequest) (*QueryGetMcaMetadataResponse, error)
	McaMetadataAll(context.Context, *QueryAllMcaMetadataRequest) (*QueryAllMcaMetadataResponse, error)
	// Queries a list of InstallmentMetadata items.
	InstallmentMetadata(context.Context, *QueryGetInstallmentMetadataRequest) (*QueryGetInstallmentMetadataResponse, error)
	InstallmentMetadataAll(context.Context, *QueryAllInstallmentMetadataRequest) (*QueryAllInstallmentMetadataResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) LoanState(context.Context, *QueryGetLoanStateRequest) (*QueryGetLoanStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoanState not implemented")
}
func (UnimplementedQueryServer) LoanStateAll(context.Context, *QueryAllLoanStateRequest) (*QueryAllLoanStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoanStateAll not implemented")
}
func (UnimplementedQueryServer) CreditCardMetadata(context.Context, *QueryGetCreditCardMetadataRequest) (*QueryGetCreditCardMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditCardMetadata not implemented")
}
func (UnimplementedQueryServer) CreditCardMetadataAll(context.Context, *QueryAllCreditCardMetadataRequest) (*QueryAllCreditCardMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditCardMetadataAll not implemented")
}
func (UnimplementedQueryServer) McaMetadata(context.Context, *QueryGetMcaMetadataRequest) (*QueryGetMcaMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method McaMetadata not implemented")
}
func (UnimplementedQueryServer) McaMetadataAll(context.Context, *QueryAllMcaMetadataRequest) (*QueryAllMcaMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method McaMetadataAll not implemented")
}
func (UnimplementedQueryServer) InstallmentMetadata(context.Context, *QueryGetInstallmentMetadataRequest) (*QueryGetInstallmentMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallmentMetadata not implemented")
}
func (UnimplementedQueryServer) InstallmentMetadataAll(context.Context, *QueryAllInstallmentMetadataRequest) (*QueryAllInstallmentMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallmentMetadataAll not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LoanState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLoanStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LoanState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LoanState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LoanState(ctx, req.(*QueryGetLoanStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LoanStateAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLoanStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LoanStateAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LoanStateAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LoanStateAll(ctx, req.(*QueryAllLoanStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CreditCardMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCreditCardMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CreditCardMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CreditCardMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CreditCardMetadata(ctx, req.(*QueryGetCreditCardMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CreditCardMetadataAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCreditCardMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CreditCardMetadataAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CreditCardMetadataAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CreditCardMetadataAll(ctx, req.(*QueryAllCreditCardMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_McaMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMcaMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).McaMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_McaMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).McaMetadata(ctx, req.(*QueryGetMcaMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_McaMetadataAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMcaMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).McaMetadataAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_McaMetadataAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).McaMetadataAll(ctx, req.(*QueryAllMcaMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InstallmentMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInstallmentMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InstallmentMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_InstallmentMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InstallmentMetadata(ctx, req.(*QueryGetInstallmentMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InstallmentMetadataAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInstallmentMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InstallmentMetadataAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_InstallmentMetadataAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InstallmentMetadataAll(ctx, req.(*QueryAllInstallmentMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ardaos.loan.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "LoanState",
			Handler:    _Query_LoanState_Handler,
		},
		{
			MethodName: "LoanStateAll",
			Handler:    _Query_LoanStateAll_Handler,
		},
		{
			MethodName: "CreditCardMetadata",
			Handler:    _Query_CreditCardMetadata_Handler,
		},
		{
			MethodName: "CreditCardMetadataAll",
			Handler:    _Query_CreditCardMetadataAll_Handler,
		},
		{
			MethodName: "McaMetadata",
			Handler:    _Query_McaMetadata_Handler,
		},
		{
			MethodName: "McaMetadataAll",
			Handler:    _Query_McaMetadataAll_Handler,
		},
		{
			MethodName: "InstallmentMetadata",
			Handler:    _Query_InstallmentMetadata_Handler,
		},
		{
			MethodName: "InstallmentMetadataAll",
			Handler:    _Query_InstallmentMetadataAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ardaos/loan/query.proto",
}
