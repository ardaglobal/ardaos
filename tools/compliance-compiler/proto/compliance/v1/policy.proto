syntax = "proto3";

package compliance.v1;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/arda-org/arda-os/tools/compliance-compiler/gen/compliance/v1;complianceapi";

// CompliancePolicy represents a complete compliance policy with all its rules,
// attestations, and enforcement configurations
message CompliancePolicy {
  // Unique identifier for the policy
  string policy_id = 1;

  // Policy version following semantic versioning
  string version = 2;

  // Target jurisdiction (ISO 3166-1 alpha-2 or custom)
  string jurisdiction = 3;

  // Target asset class for specialized compliance rules
  string asset_class = 4;

  // Policy rules that define compliance conditions
  repeated PolicyRule rules = 5;

  // Required attestations for compliance verification
  repeated AttestationRequirement attestations = 6;

  // Enforcement configuration for policy violations
  EnforcementConfig enforcement = 7;

  // Policy metadata for documentation and organization
  PolicyMetadata metadata = 8;

  // Timestamps for policy lifecycle management
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
  google.protobuf.Timestamp expires_at = 11;
}

// PolicyRule defines a single compliance rule with its conditions
message PolicyRule {
  // Rule identifier unique within the policy
  string rule_id = 1;

  // Human-readable rule name
  string name = 2;

  // Detailed description of the rule purpose
  string description = 3;

  // The predicate logic that defines when the rule is satisfied
  Predicate predicate = 4;

  // Whether this rule is required for compliance (vs. advisory)
  bool required = 5;

  // Priority level for rule evaluation order
  int32 priority = 6;

  // Tags for rule categorization and filtering
  repeated string tags = 7;
}

// Predicate represents the logical conditions for rule evaluation
message Predicate {
  oneof predicate_type {
    ComparisonPredicate comparison = 1;
    LogicalPredicate logical = 2;
    ExistsPredicate exists = 3;
    RangePredicate range = 4;
    SetPredicate set = 5;
    TimePredicate time = 6;
    ExpressionPredicate expression = 7;
    RegexPredicate regex = 8;
  }
}

// ComparisonPredicate compares a field value with a reference value
message ComparisonPredicate {
  FieldPath field_path = 1;
  ComparisonOperator operator = 2;
  google.protobuf.Any value = 3;
}

// LogicalPredicate combines multiple predicates with logical operators
message LogicalPredicate {
  LogicalOperator operator = 1;
  repeated Predicate operands = 2;
}

// ExistsPredicate checks for field existence
message ExistsPredicate {
  FieldPath field_path = 1;
  bool should_exist = 2;
}

// RangePredicate checks if a field value falls within a range
message RangePredicate {
  FieldPath field_path = 1;
  google.protobuf.Any min_value = 2;
  google.protobuf.Any max_value = 3;
  bool min_inclusive = 4;
  bool max_inclusive = 5;
}

// SetPredicate checks membership in a set of values
message SetPredicate {
  FieldPath field_path = 1;
  repeated google.protobuf.Any values = 2;
  bool is_member = 3; // true for IN, false for NOT IN
}

// TimePredicate handles time-based comparisons and ranges
message TimePredicate {
  FieldPath field_path = 1;
  TimeOperator operator = 2;
  google.protobuf.Timestamp reference_time = 3;
  int64 duration_seconds = 4;
}

// ExpressionPredicate evaluates complex expressions
message ExpressionPredicate {
  string expression = 1;
  ExpressionLanguage language = 2;
  map<string, google.protobuf.Any> variables = 3;
}

// RegexPredicate matches field values against regular expressions
message RegexPredicate {
  FieldPath field_path = 1;
  string pattern = 2;
  repeated RegexFlag flags = 3;
}

// FieldPath represents a path to a field in the data structure
message FieldPath {
  repeated PathComponent components = 1;
  string raw_path = 2; // Original dot-notation path for debugging
}

// PathComponent represents a single component in a field path
message PathComponent {
  oneof component_type {
    string field_name = 1;
    int32 array_index = 2;
    string array_filter = 3;
    FunctionCall function_call = 4;
  }
}

// FunctionCall represents a function invocation in a field path
message FunctionCall {
  string name = 1;
  repeated google.protobuf.Any arguments = 2;
}

// AttestationRequirement defines required attestations for compliance
message AttestationRequirement {
  // Attestation identifier
  string attestation_id = 1;

  // Human-readable name
  string name = 2;

  // Detailed description
  string description = 3;

  // Type of attestation required
  AttestationType type = 4;

  // Whether this attestation is required or optional
  bool required = 5;

  // Provider information for external attestations
  AttestationProvider provider = 6;

  // Validity period for the attestation
  int64 validity_seconds = 7;
}

// AttestationProvider defines external attestation service configuration
message AttestationProvider {
  string provider_id = 1;
  string name = 2;
  string endpoint = 3;
  map<string, string> configuration = 4;
}

// EnforcementConfig defines how policy violations are handled
message EnforcementConfig {
  // Enforcement level determines the severity of violations
  EnforcementLevel level = 1;

  // Actions to take on policy violations
  repeated EnforcementAction actions = 2;

  // Escalation configuration for repeated violations
  EscalationConfig escalation = 3;

  // Grace period before enforcement takes effect
  int64 grace_period_seconds = 4;
}

// EscalationConfig defines escalation behavior for violations
message EscalationConfig {
  // Enable escalation for repeated violations
  bool enabled = 1;

  // Threshold for escalation trigger
  int32 violation_threshold = 2;

  // Time window for counting violations
  int64 time_window_seconds = 3;

  // Escalated enforcement level
  EnforcementLevel escalated_level = 4;

  // Additional actions for escalated violations
  repeated EnforcementAction escalated_actions = 5;
}

// PolicyMetadata provides additional information about the policy
message PolicyMetadata {
  // Human-readable title
  string title = 1;

  // Detailed description
  string description = 2;

  // Author information
  string author = 3;

  // Organizational unit responsible for the policy
  string organization = 4;

  // Classification tags
  repeated string tags = 5;

  // External references and documentation links
  repeated ExternalReference references = 6;

  // Regulatory framework mappings
  repeated RegulatoryFramework regulatory_frameworks = 7;
}

// ExternalReference links to external documentation or regulations
message ExternalReference {
  string title = 1;
  string url = 2;
  string description = 3;
  ReferenceType type = 4;
}

// RegulatoryFramework maps policy rules to specific regulations
message RegulatoryFramework {
  string framework_id = 1;
  string name = 2;
  string jurisdiction = 3;
  repeated string applicable_sections = 4;
}

// Enums for various policy components

enum ComparisonOperator {
  COMPARISON_OPERATOR_UNSPECIFIED = 0;
  COMPARISON_OPERATOR_EQUAL = 1;
  COMPARISON_OPERATOR_NOT_EQUAL = 2;
  COMPARISON_OPERATOR_GREATER_THAN = 3;
  COMPARISON_OPERATOR_GREATER_THAN_OR_EQUAL = 4;
  COMPARISON_OPERATOR_LESS_THAN = 5;
  COMPARISON_OPERATOR_LESS_THAN_OR_EQUAL = 6;
  COMPARISON_OPERATOR_CONTAINS = 7;
  COMPARISON_OPERATOR_STARTS_WITH = 8;
  COMPARISON_OPERATOR_ENDS_WITH = 9;
}

enum LogicalOperator {
  LOGICAL_OPERATOR_UNSPECIFIED = 0;
  LOGICAL_OPERATOR_AND = 1;
  LOGICAL_OPERATOR_OR = 2;
  LOGICAL_OPERATOR_NOT = 3;
}

enum TimeOperator {
  TIME_OPERATOR_UNSPECIFIED = 0;
  TIME_OPERATOR_BEFORE = 1;
  TIME_OPERATOR_AFTER = 2;
  TIME_OPERATOR_ON = 3;
  TIME_OPERATOR_WITHIN = 4;
  TIME_OPERATOR_OUTSIDE = 5;
}

enum ExpressionLanguage {
  EXPRESSION_LANGUAGE_UNSPECIFIED = 0;
  EXPRESSION_LANGUAGE_CEL = 1;     // Common Expression Language
  EXPRESSION_LANGUAGE_JSONPATH = 2; // JSONPath expressions
  EXPRESSION_LANGUAGE_JMESPATH = 3; // JMESPath expressions
}

enum RegexFlag {
  REGEX_FLAG_UNSPECIFIED = 0;
  REGEX_FLAG_CASE_INSENSITIVE = 1;
  REGEX_FLAG_MULTILINE = 2;
  REGEX_FLAG_DOT_ALL = 3;
  REGEX_FLAG_UNICODE = 4;
}

enum AttestationType {
  ATTESTATION_TYPE_UNSPECIFIED = 0;
  ATTESTATION_TYPE_IDENTITY_VERIFICATION = 1;
  ATTESTATION_TYPE_CREDIT_CHECK = 2;
  ATTESTATION_TYPE_BANK_VERIFICATION = 3;
  ATTESTATION_TYPE_INCOME_VERIFICATION = 4;
  ATTESTATION_TYPE_ASSET_VALUATION = 5;
  ATTESTATION_TYPE_COMPLIANCE_REVIEW = 6;
  ATTESTATION_TYPE_MANUAL_REVIEW = 7;
  ATTESTATION_TYPE_LEGAL_OPINION = 8;
  ATTESTATION_TYPE_REGULATORY_APPROVAL = 9;
  ATTESTATION_TYPE_CUSTOM = 10;
}

enum EnforcementLevel {
  ENFORCEMENT_LEVEL_UNSPECIFIED = 0;
  ENFORCEMENT_LEVEL_ADVISORY = 1;      // Log warnings only
  ENFORCEMENT_LEVEL_WARNING = 2;       // Generate warnings
  ENFORCEMENT_LEVEL_BLOCKING = 3;      // Block transactions
  ENFORCEMENT_LEVEL_QUARANTINE = 4;    // Quarantine for review
  ENFORCEMENT_LEVEL_REJECT = 5;        // Automatically reject
}

enum EnforcementAction {
  ENFORCEMENT_ACTION_UNSPECIFIED = 0;
  ENFORCEMENT_ACTION_LOG = 1;
  ENFORCEMENT_ACTION_ALERT = 2;
  ENFORCEMENT_ACTION_EMAIL = 3;
  ENFORCEMENT_ACTION_SLACK = 4;
  ENFORCEMENT_ACTION_WEBHOOK = 5;
  ENFORCEMENT_ACTION_QUEUE_REVIEW = 6;
  ENFORCEMENT_ACTION_BLOCK_TRANSACTION = 7;
  ENFORCEMENT_ACTION_REQUIRE_APPROVAL = 8;
  ENFORCEMENT_ACTION_AUTOMATIC_REJECTION = 9;
}

enum ReferenceType {
  REFERENCE_TYPE_UNSPECIFIED = 0;
  REFERENCE_TYPE_REGULATION = 1;
  REFERENCE_TYPE_GUIDANCE = 2;
  REFERENCE_TYPE_DOCUMENTATION = 3;
  REFERENCE_TYPE_BEST_PRACTICE = 4;
  REFERENCE_TYPE_TECHNICAL_STANDARD = 5;
}
