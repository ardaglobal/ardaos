package parser

import (
	"google.golang.org/protobuf/types/known/anypb"
	"google.golang.org/protobuf/types/known/timestamppb"
	"google.golang.org/protobuf/types/known/wrapperspb"
)

// This file contains the protobuf type definitions used by the parser
// These would normally be generated from the .proto files

// CompliancePolicy represents the main compliance policy structure
type CompliancePolicy struct {
	PolicyId     string                   `json:"policy_id"`
	Version      string                   `json:"version"`
	Jurisdiction string                   `json:"jurisdiction"`
	AssetClass   string                   `json:"asset_class"`
	Rules        []*PolicyRule            `json:"rules"`
	Attestations []*AttestationRequirement `json:"attestations"`
	Enforcement  *EnforcementConfig       `json:"enforcement"`
	Metadata     *PolicyMetadata          `json:"metadata"`
	CreatedAt    *timestamppb.Timestamp   `json:"created_at"`
	CreatedBy    string                   `json:"created_by"`
}

// PolicyRule represents a single compliance rule
type PolicyRule struct {
	Name        string     `json:"name"`
	Description string     `json:"description"`
	Predicate   *Predicate `json:"predicate"`
	Required    bool       `json:"required"`
	Metadata    *RuleMetadata `json:"metadata"`
}

// RuleMetadata contains metadata for a policy rule
type RuleMetadata struct {
	Category    string            `json:"category"`
	Priority    int32             `json:"priority"`
	Tags        []string          `json:"tags"`
	RiskLevel   RiskLevel         `json:"risk_level"`
	CustomFields map[string]string `json:"custom_fields"`
}

// RiskLevel enumeration
type RiskLevel int32

const (
	RiskLevel_RISK_LEVEL_UNSPECIFIED RiskLevel = 0
	RiskLevel_RISK_LEVEL_LOW         RiskLevel = 1
	RiskLevel_RISK_LEVEL_MEDIUM      RiskLevel = 2
	RiskLevel_RISK_LEVEL_HIGH        RiskLevel = 3
	RiskLevel_RISK_LEVEL_CRITICAL    RiskLevel = 4
)

// Predicate represents the core predicate structure
type Predicate struct {
	PredicateType interface{} `json:"predicate_type"`
	Metadata      *PredicateMetadata `json:"metadata"`
}

// Predicate type wrappers
type Predicate_Logical struct {
	Logical *LogicalPredicate `json:"logical"`
}

type Predicate_Comparison struct {
	Comparison *ComparisonPredicate `json:"comparison"`
}

type Predicate_Exists struct {
	Exists *ExistsPredicate `json:"exists"`
}

type Predicate_Range struct {
	Range *RangePredicate `json:"range"`
}

type Predicate_Set struct {
	Set *SetPredicate `json:"set"`
}

type Predicate_Time struct {
	Time *TimePredicate `json:"time"`
}

type Predicate_Expression struct {
	Expression *ExpressionPredicate `json:"expression"`
}

type Predicate_Regex struct {
	Regex *RegexPredicate `json:"regex"`
}

// PredicateMetadata contains metadata for predicates
type PredicateMetadata struct {
	Description string            `json:"description"`
	Tags        []string          `json:"tags"`
	CreatedBy   string            `json:"created_by"`
	CreatedAt   *timestamppb.Timestamp `json:"created_at"`
	CustomMetadata map[string]string `json:"custom_metadata"`
}

// LogicalPredicate represents logical operations
type LogicalPredicate struct {
	Operator LogicalOperator `json:"operator"`
	Operands []*Predicate    `json:"operands"`
}

// LogicalOperator enumeration
type LogicalOperator int32

const (
	LogicalOperator_LOGICAL_OPERATOR_UNSPECIFIED LogicalOperator = 0
	LogicalOperator_LOGICAL_OPERATOR_AND         LogicalOperator = 1
	LogicalOperator_LOGICAL_OPERATOR_OR          LogicalOperator = 2
	LogicalOperator_LOGICAL_OPERATOR_NOT         LogicalOperator = 3
	LogicalOperator_LOGICAL_OPERATOR_XOR         LogicalOperator = 4
	LogicalOperator_LOGICAL_OPERATOR_NAND        LogicalOperator = 5
	LogicalOperator_LOGICAL_OPERATOR_NOR         LogicalOperator = 6
)

// ComparisonPredicate represents comparison operations
type ComparisonPredicate struct {
	FieldPath *FieldPath          `json:"field_path"`
	Operator  ComparisonOperator  `json:"operator"`
	Value     *anypb.Any         `json:"value"`
}

// ComparisonOperator enumeration
type ComparisonOperator int32

const (
	ComparisonOperator_COMPARISON_OPERATOR_UNSPECIFIED           ComparisonOperator = 0
	ComparisonOperator_COMPARISON_OPERATOR_EQUAL                 ComparisonOperator = 1
	ComparisonOperator_COMPARISON_OPERATOR_NOT_EQUAL             ComparisonOperator = 2
	ComparisonOperator_COMPARISON_OPERATOR_LESS_THAN             ComparisonOperator = 3
	ComparisonOperator_COMPARISON_OPERATOR_GREATER_THAN          ComparisonOperator = 4
	ComparisonOperator_COMPARISON_OPERATOR_LESS_THAN_OR_EQUAL    ComparisonOperator = 5
	ComparisonOperator_COMPARISON_OPERATOR_GREATER_THAN_OR_EQUAL ComparisonOperator = 6
	ComparisonOperator_COMPARISON_OPERATOR_CONTAINS              ComparisonOperator = 7
	ComparisonOperator_COMPARISON_OPERATOR_STARTS_WITH           ComparisonOperator = 8
	ComparisonOperator_COMPARISON_OPERATOR_ENDS_WITH             ComparisonOperator = 9
	ComparisonOperator_COMPARISON_OPERATOR_MATCHES_REGEX         ComparisonOperator = 10
	ComparisonOperator_COMPARISON_OPERATOR_FUZZY_MATCH           ComparisonOperator = 11
	ComparisonOperator_COMPARISON_OPERATOR_APPROXIMATELY_EQUAL   ComparisonOperator = 12
)

// FieldPath represents a field path with components
type FieldPath struct {
	Components []*PathComponent `json:"components"`
	RawPath    string           `json:"raw_path"`
	Optional   bool             `json:"optional"`
	DefaultValue *anypb.Any     `json:"default_value"`
}

// PathComponent represents a single component in a field path
type PathComponent struct {
	ComponentType interface{} `json:"component_type"`
}

// PathComponent type wrappers
type PathComponent_FieldName struct {
	FieldName string `json:"field_name"`
}

type PathComponent_ArrayIndex struct {
	ArrayIndex int32 `json:"array_index"`
}

type PathComponent_ArrayFilter struct {
	ArrayFilter string `json:"array_filter"`
}

type PathComponent_FunctionCall struct {
	FunctionCall *FunctionCall `json:"function_call"`
}

// FunctionCall represents a function call in a field path
type FunctionCall struct {
	Name      string          `json:"name"`
	Arguments []*anypb.Any   `json:"arguments"`
	NamedArguments map[string]*anypb.Any `json:"named_arguments"`
}

// ExistsPredicate represents existence checks
type ExistsPredicate struct {
	FieldPath   *FieldPath `json:"field_path"`
	ShouldExist bool       `json:"should_exist"`
	CheckType   ExistenceCheck `json:"check_type"`
}

// ExistenceCheck enumeration
type ExistenceCheck int32

const (
	ExistenceCheck_EXISTENCE_CHECK_UNSPECIFIED ExistenceCheck = 0
	ExistenceCheck_EXISTENCE_CHECK_NOT_NULL    ExistenceCheck = 1
	ExistenceCheck_EXISTENCE_CHECK_NOT_EMPTY   ExistenceCheck = 2
	ExistenceCheck_EXISTENCE_CHECK_HAS_VALUE   ExistenceCheck = 3
	ExistenceCheck_EXISTENCE_CHECK_IS_SET      ExistenceCheck = 4
)

// RangePredicate represents range checks
type RangePredicate struct {
	FieldPath    *FieldPath `json:"field_path"`
	MinValue     *anypb.Any `json:"min_value"`
	MaxValue     *anypb.Any `json:"max_value"`
	MinInclusive bool       `json:"min_inclusive"`
	MaxInclusive bool       `json:"max_inclusive"`
}

// SetPredicate represents set membership checks
type SetPredicate struct {
	FieldPath *FieldPath   `json:"field_path"`
	Values    []*anypb.Any `json:"values"`
	IsMember  bool         `json:"is_member"`
	Operation SetOperation `json:"operation"`
}

// SetOperation enumeration
type SetOperation int32

const (
	SetOperation_SET_OPERATION_UNSPECIFIED SetOperation = 0
	SetOperation_SET_OPERATION_IN          SetOperation = 1
	SetOperation_SET_OPERATION_NOT_IN      SetOperation = 2
	SetOperation_SET_OPERATION_SUBSET      SetOperation = 3
	SetOperation_SET_OPERATION_SUPERSET    SetOperation = 4
	SetOperation_SET_OPERATION_INTERSECTS  SetOperation = 5
	SetOperation_SET_OPERATION_DISJOINT    SetOperation = 6
)

// TimePredicate represents time-based checks
type TimePredicate struct {
	FieldPath       *FieldPath             `json:"field_path"`
	Operator        TimeOperator           `json:"operator"`
	ReferenceTime   *timestamppb.Timestamp `json:"reference_time"`
	DurationSeconds int64                  `json:"duration_seconds"`
	Timezone        string                 `json:"timezone"`
}

// TimeOperator enumeration
type TimeOperator int32

const (
	TimeOperator_TIME_OPERATOR_UNSPECIFIED           TimeOperator = 0
	TimeOperator_TIME_OPERATOR_BEFORE                TimeOperator = 1
	TimeOperator_TIME_OPERATOR_AFTER                 TimeOperator = 2
	TimeOperator_TIME_OPERATOR_WITHIN                TimeOperator = 3
	TimeOperator_TIME_OPERATOR_OLDER_THAN            TimeOperator = 4
	TimeOperator_TIME_OPERATOR_NEWER_THAN            TimeOperator = 5
	TimeOperator_TIME_OPERATOR_SAME_DAY              TimeOperator = 6
	TimeOperator_TIME_OPERATOR_SAME_WEEK             TimeOperator = 7
	TimeOperator_TIME_OPERATOR_SAME_MONTH            TimeOperator = 8
	TimeOperator_TIME_OPERATOR_SAME_YEAR             TimeOperator = 9
	TimeOperator_TIME_OPERATOR_BUSINESS_DAYS_BETWEEN TimeOperator = 10
	TimeOperator_TIME_OPERATOR_WEEKEND               TimeOperator = 11
	TimeOperator_TIME_OPERATOR_BUSINESS_HOUR         TimeOperator = 12
)

// ExpressionPredicate represents expression evaluations
type ExpressionPredicate struct {
	Expression      string                    `json:"expression"`
	Language        ExpressionLanguage        `json:"language"`
	Variables       map[string]*anypb.Any    `json:"variables"`
	RequiredFields  []string                  `json:"required_fields"`
}

// ExpressionLanguage enumeration
type ExpressionLanguage int32

const (
	ExpressionLanguage_EXPRESSION_LANGUAGE_UNSPECIFIED  ExpressionLanguage = 0
	ExpressionLanguage_EXPRESSION_LANGUAGE_CEL          ExpressionLanguage = 1
	ExpressionLanguage_EXPRESSION_LANGUAGE_JSONPATH     ExpressionLanguage = 2
	ExpressionLanguage_EXPRESSION_LANGUAGE_JMESPATH     ExpressionLanguage = 3
	ExpressionLanguage_EXPRESSION_LANGUAGE_JAVASCRIPT   ExpressionLanguage = 4
	ExpressionLanguage_EXPRESSION_LANGUAGE_GOLANG       ExpressionLanguage = 5
	ExpressionLanguage_EXPRESSION_LANGUAGE_PYTHON       ExpressionLanguage = 6
	ExpressionLanguage_EXPRESSION_LANGUAGE_SQL          ExpressionLanguage = 7
	ExpressionLanguage_EXPRESSION_LANGUAGE_XPATH        ExpressionLanguage = 8
	ExpressionLanguage_EXPRESSION_LANGUAGE_REGEX        ExpressionLanguage = 9
	ExpressionLanguage_EXPRESSION_LANGUAGE_MATHEMATICAL ExpressionLanguage = 10
	ExpressionLanguage_EXPRESSION_LANGUAGE_CUSTOM       ExpressionLanguage = 100
)

// RegexPredicate represents regex pattern matching
type RegexPredicate struct {
	FieldPath *FieldPath  `json:"field_path"`
	Pattern   string      `json:"pattern"`
	Flags     []RegexFlag `json:"flags"`
	MaxLength int32       `json:"max_length"`
	TimeoutMs int64       `json:"timeout_ms"`
}

// RegexFlag enumeration
type RegexFlag int32

const (
	RegexFlag_REGEX_FLAG_UNSPECIFIED      RegexFlag = 0
	RegexFlag_REGEX_FLAG_CASE_INSENSITIVE RegexFlag = 1
	RegexFlag_REGEX_FLAG_MULTILINE        RegexFlag = 2
	RegexFlag_REGEX_FLAG_DOT_ALL          RegexFlag = 4
	RegexFlag_REGEX_FLAG_UNICODE          RegexFlag = 8
	RegexFlag_REGEX_FLAG_EXTENDED         RegexFlag = 16
)

// AttestationRequirement represents external data requirements
type AttestationRequirement struct {
	Name         string          `json:"name"`
	Description  string          `json:"description"`
	Type         AttestationType `json:"type"`
	Required     bool            `json:"required"`
	RequiredFields []string      `json:"required_fields"`
	Metadata     *AttestationMetadata `json:"metadata"`
}

// AttestationType enumeration
type AttestationType int32

const (
	AttestationType_ATTESTATION_TYPE_UNSPECIFIED           AttestationType = 0
	AttestationType_ATTESTATION_TYPE_KYC                   AttestationType = 1
	AttestationType_ATTESTATION_TYPE_AML                   AttestationType = 2
	AttestationType_ATTESTATION_TYPE_ACCREDITED_INVESTOR   AttestationType = 3
	AttestationType_ATTESTATION_TYPE_INSTITUTIONAL         AttestationType = 4
	AttestationType_ATTESTATION_TYPE_REGULATORY_APPROVAL   AttestationType = 5
	AttestationType_ATTESTATION_TYPE_FINANCIAL_STATEMENT   AttestationType = 6
	AttestationType_ATTESTATION_TYPE_CREDIT_RATING         AttestationType = 7
	AttestationType_ATTESTATION_TYPE_TAX_STATUS            AttestationType = 8
	AttestationType_ATTESTATION_TYPE_JURISDICTION_PROOF    AttestationType = 9
	AttestationType_ATTESTATION_TYPE_IDENTITY_VERIFICATION AttestationType = 10
	AttestationType_ATTESTATION_TYPE_BIOMETRIC_VERIFICATION AttestationType = 11
	AttestationType_ATTESTATION_TYPE_SANCTION_SCREENING    AttestationType = 12
	AttestationType_ATTESTATION_TYPE_PEP_CHECK             AttestationType = 13
	AttestationType_ATTESTATION_TYPE_ADVERSE_MEDIA         AttestationType = 14
	AttestationType_ATTESTATION_TYPE_CUSTOM                AttestationType = 100
)

// AttestationMetadata contains metadata for attestations
type AttestationMetadata struct {
	Category            string            `json:"category"`
	Tags                []string          `json:"tags"`
	Priority            int32             `json:"priority"`
	RiskLevel           RiskLevel         `json:"risk_level"`
	ValidityDurationSeconds int64         `json:"validity_duration_seconds"`
	Renewable           bool              `json:"renewable"`
	RequiredDocuments   []string          `json:"required_documents"`
	VerificationMethod  string            `json:"verification_method"`
	CustomFields        map[string]string `json:"custom_fields"`
}

// EnforcementConfig represents enforcement configuration
type EnforcementConfig struct {
	Level           EnforcementLevel   `json:"level"`
	Actions         []EnforcementAction `json:"actions"`
	Alerts          *AlertConfig       `json:"alerts"`
	AutoRemediation bool               `json:"auto_remediation"`
	GracePeriodSeconds int64           `json:"grace_period_seconds"`
}

// EnforcementLevel enumeration
type EnforcementLevel int32

const (
	EnforcementLevel_ENFORCEMENT_LEVEL_UNSPECIFIED   EnforcementLevel = 0
	EnforcementLevel_ENFORCEMENT_LEVEL_DISABLED      EnforcementLevel = 1
	EnforcementLevel_ENFORCEMENT_LEVEL_MONITORING    EnforcementLevel = 2
	EnforcementLevel_ENFORCEMENT_LEVEL_ADVISORY      EnforcementLevel = 3
	EnforcementLevel_ENFORCEMENT_LEVEL_WARNING       EnforcementLevel = 4
	EnforcementLevel_ENFORCEMENT_LEVEL_SOFT_BLOCKING EnforcementLevel = 5
	EnforcementLevel_ENFORCEMENT_LEVEL_BLOCKING      EnforcementLevel = 6
	EnforcementLevel_ENFORCEMENT_LEVEL_CRITICAL      EnforcementLevel = 7
	EnforcementLevel_ENFORCEMENT_LEVEL_EMERGENCY     EnforcementLevel = 8
)

// EnforcementAction enumeration
type EnforcementAction int32

const (
	EnforcementAction_ENFORCEMENT_ACTION_UNSPECIFIED                EnforcementAction = 0
	EnforcementAction_ENFORCEMENT_ACTION_LOG                        EnforcementAction = 1
	EnforcementAction_ENFORCEMENT_ACTION_ALERT                      EnforcementAction = 2
	EnforcementAction_ENFORCEMENT_ACTION_BLOCK_TRANSACTION          EnforcementAction = 3
	EnforcementAction_ENFORCEMENT_ACTION_FREEZE_ACCOUNT             EnforcementAction = 4
	EnforcementAction_ENFORCEMENT_ACTION_REQUIRE_APPROVAL           EnforcementAction = 5
	EnforcementAction_ENFORCEMENT_ACTION_ESCALATE                   EnforcementAction = 6
	EnforcementAction_ENFORCEMENT_ACTION_AUDIT_LOG                  EnforcementAction = 7
	EnforcementAction_ENFORCEMENT_ACTION_NOTIFY_COMPLIANCE          EnforcementAction = 8
	EnforcementAction_ENFORCEMENT_ACTION_NOTIFY_REGULATOR           EnforcementAction = 9
	EnforcementAction_ENFORCEMENT_ACTION_QUARANTINE_TRANSACTION     EnforcementAction = 10
	EnforcementAction_ENFORCEMENT_ACTION_DELAY_TRANSACTION          EnforcementAction = 11
	EnforcementAction_ENFORCEMENT_ACTION_SUSPEND_ACCOUNT            EnforcementAction = 12
	EnforcementAction_ENFORCEMENT_ACTION_RESTRICT_ACCOUNT           EnforcementAction = 13
	EnforcementAction_ENFORCEMENT_ACTION_FLAG_ACCOUNT               EnforcementAction = 14
	EnforcementAction_ENFORCEMENT_ACTION_TRIGGER_REMEDIATION        EnforcementAction = 15
	EnforcementAction_ENFORCEMENT_ACTION_REQUIRE_ATTESTATION        EnforcementAction = 16
	EnforcementAction_ENFORCEMENT_ACTION_FORCE_COMPLIANCE_CHECK     EnforcementAction = 17
	EnforcementAction_ENFORCEMENT_ACTION_REGULATORY_FILING          EnforcementAction = 18
	EnforcementAction_ENFORCEMENT_ACTION_LEGAL_HOLD                 EnforcementAction = 19
	EnforcementAction_ENFORCEMENT_ACTION_WEBHOOK                    EnforcementAction = 20
	EnforcementAction_ENFORCEMENT_ACTION_API_CALL                   EnforcementAction = 21
	EnforcementAction_ENFORCEMENT_ACTION_QUEUE_MESSAGE              EnforcementAction = 22
)

// AlertConfig represents alert configuration
type AlertConfig struct {
	Enabled           bool             `json:"enabled"`
	Channels          []*AlertChannel  `json:"channels"`
	Severity          AlertSeverity    `json:"severity"`
	CooldownSeconds   int64            `json:"cooldown_seconds"`
	Deduplicate       bool             `json:"deduplicate"`
	MaxAlertsPerHour  int32            `json:"max_alerts_per_hour"`
}

// AlertChannel represents an alert delivery channel
type AlertChannel struct {
	Name        string            `json:"name"`
	Type        AlertChannelType  `json:"type"`
	Recipients  []string          `json:"recipients"`
	Config      map[string]string `json:"config"`
	Enabled     bool              `json:"enabled"`
	MinSeverity AlertSeverity     `json:"min_severity"`
}

// AlertChannelType enumeration
type AlertChannelType int32

const (
	AlertChannelType_ALERT_CHANNEL_TYPE_UNSPECIFIED        AlertChannelType = 0
	AlertChannelType_ALERT_CHANNEL_TYPE_EMAIL              AlertChannelType = 1
	AlertChannelType_ALERT_CHANNEL_TYPE_SMS                AlertChannelType = 2
	AlertChannelType_ALERT_CHANNEL_TYPE_SLACK              AlertChannelType = 3
	AlertChannelType_ALERT_CHANNEL_TYPE_TEAMS              AlertChannelType = 4
	AlertChannelType_ALERT_CHANNEL_TYPE_WEBHOOK            AlertChannelType = 5
	AlertChannelType_ALERT_CHANNEL_TYPE_PUSH_NOTIFICATION  AlertChannelType = 6
	AlertChannelType_ALERT_CHANNEL_TYPE_PHONE_CALL         AlertChannelType = 7
	AlertChannelType_ALERT_CHANNEL_TYPE_PAGER              AlertChannelType = 8
	AlertChannelType_ALERT_CHANNEL_TYPE_INCIDENT_MANAGEMENT AlertChannelType = 9
)

// AlertSeverity enumeration
type AlertSeverity int32

const (
	AlertSeverity_ALERT_SEVERITY_UNSPECIFIED AlertSeverity = 0
	AlertSeverity_ALERT_SEVERITY_INFO        AlertSeverity = 1
	AlertSeverity_ALERT_SEVERITY_LOW         AlertSeverity = 2
	AlertSeverity_ALERT_SEVERITY_MEDIUM      AlertSeverity = 3
	AlertSeverity_ALERT_SEVERITY_HIGH        AlertSeverity = 4
	AlertSeverity_ALERT_SEVERITY_CRITICAL    AlertSeverity = 5
	AlertSeverity_ALERT_SEVERITY_EMERGENCY   AlertSeverity = 6
)

// PolicyMetadata represents policy metadata
type PolicyMetadata struct {
	Title           string            `json:"title"`
	Description     string            `json:"description"`
	Tags            []string          `json:"tags"`
	Category        string            `json:"category"`
	Priority        int32             `json:"priority"`
	Author          string            `json:"author"`
	Organization    string            `json:"organization"`
	ContactEmail    string            `json:"contact_email"`
	RelatedPolicies []string          `json:"related_policies"`
	CustomFields    map[string]string `json:"custom_fields"`
	LegalReferences []string          `json:"legal_references"`
	RegulatoryFramework string        `json:"regulatory_framework"`
	RiskAssessment  string            `json:"risk_assessment"`
	Stakeholders    []string          `json:"stakeholders"`
}
