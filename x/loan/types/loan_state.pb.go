// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ardaos/loan/loan_state.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LoanState struct {
	Index           string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	LoanId          string `protobuf:"bytes,2,opt,name=loanId,proto3" json:"loanId,omitempty"`
	Status          string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	CurrentBalance  uint64 `protobuf:"varint,4,opt,name=currentBalance,proto3" json:"currentBalance,omitempty"`
	PaymentsMade    uint32 `protobuf:"varint,5,opt,name=paymentsMade,proto3" json:"paymentsMade,omitempty"`
	LastPaymentDate string `protobuf:"bytes,6,opt,name=lastPaymentDate,proto3" json:"lastPaymentDate,omitempty"`
	NextPaymentDate string `protobuf:"bytes,7,opt,name=nextPaymentDate,proto3" json:"nextPaymentDate,omitempty"`
	DelinquencyDays uint32 `protobuf:"varint,8,opt,name=delinquencyDays,proto3" json:"delinquencyDays,omitempty"`
	Creator         string `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *LoanState) Reset()         { *m = LoanState{} }
func (m *LoanState) String() string { return proto.CompactTextString(m) }
func (*LoanState) ProtoMessage()    {}
func (*LoanState) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dada8c47fcb28df, []int{0}
}
func (m *LoanState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoanState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoanState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoanState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoanState.Merge(m, src)
}
func (m *LoanState) XXX_Size() int {
	return m.Size()
}
func (m *LoanState) XXX_DiscardUnknown() {
	xxx_messageInfo_LoanState.DiscardUnknown(m)
}

var xxx_messageInfo_LoanState proto.InternalMessageInfo

func (m *LoanState) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *LoanState) GetLoanId() string {
	if m != nil {
		return m.LoanId
	}
	return ""
}

func (m *LoanState) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *LoanState) GetCurrentBalance() uint64 {
	if m != nil {
		return m.CurrentBalance
	}
	return 0
}

func (m *LoanState) GetPaymentsMade() uint32 {
	if m != nil {
		return m.PaymentsMade
	}
	return 0
}

func (m *LoanState) GetLastPaymentDate() string {
	if m != nil {
		return m.LastPaymentDate
	}
	return ""
}

func (m *LoanState) GetNextPaymentDate() string {
	if m != nil {
		return m.NextPaymentDate
	}
	return ""
}

func (m *LoanState) GetDelinquencyDays() uint32 {
	if m != nil {
		return m.DelinquencyDays
	}
	return 0
}

func (m *LoanState) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*LoanState)(nil), "ardaos.loan.LoanState")
}

func init() { proto.RegisterFile("ardaos/loan/loan_state.proto", fileDescriptor_3dada8c47fcb28df) }

var fileDescriptor_3dada8c47fcb28df = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xbf, 0x4a, 0xc4, 0x40,
	0x10, 0xc6, 0x6f, 0xcf, 0xbb, 0x9c, 0x59, 0xff, 0xc1, 0x72, 0xc8, 0x16, 0xb2, 0x84, 0x2b, 0x24,
	0x8d, 0xb9, 0xc2, 0x37, 0x38, 0xae, 0x11, 0x14, 0x24, 0x76, 0x36, 0x32, 0x26, 0x53, 0x1c, 0xc4,
	0xdd, 0xb8, 0xbb, 0x81, 0xe4, 0x2d, 0x7c, 0x19, 0xdf, 0xc1, 0xf2, 0x4a, 0x4b, 0x49, 0x5e, 0x44,
	0x76, 0x57, 0x8b, 0x4b, 0x33, 0xf0, 0xfd, 0xe6, 0xc7, 0x0c, 0x7c, 0xf4, 0x0a, 0x74, 0x09, 0xca,
	0xac, 0x2b, 0x05, 0xd2, 0x8f, 0x17, 0x63, 0xc1, 0x62, 0x56, 0x6b, 0x65, 0x15, 0x3b, 0x09, 0xdb,
	0xcc, 0x2d, 0x56, 0x9f, 0x53, 0x1a, 0xdf, 0x2b, 0x90, 0x4f, 0x4e, 0x60, 0x4b, 0x3a, 0xdf, 0xc9,
	0x12, 0x5b, 0x4e, 0x12, 0x92, 0xc6, 0x79, 0x08, 0xec, 0x92, 0x46, 0xce, 0xbd, 0x2b, 0xf9, 0xd4,
	0xe3, 0xbf, 0xe4, 0xb8, 0xbb, 0xdb, 0x18, 0x7e, 0x14, 0x78, 0x48, 0xec, 0x9a, 0x9e, 0x17, 0x8d,
	0xd6, 0x28, 0xed, 0x06, 0x2a, 0x90, 0x05, 0xf2, 0x59, 0x42, 0xd2, 0x59, 0x3e, 0xa2, 0x6c, 0x45,
	0x4f, 0x6b, 0xe8, 0xde, 0x50, 0x5a, 0xf3, 0x00, 0x25, 0xf2, 0x79, 0x42, 0xd2, 0xb3, 0xfc, 0x80,
	0xb1, 0x94, 0x5e, 0x54, 0x60, 0xec, 0x63, 0x60, 0x5b, 0xb0, 0xc8, 0x23, 0xff, 0x6c, 0x8c, 0x9d,
	0x29, 0xb1, 0x3d, 0x30, 0x17, 0xc1, 0x1c, 0x61, 0x67, 0x96, 0x58, 0xed, 0xe4, 0x7b, 0x83, 0xb2,
	0xe8, 0xb6, 0xd0, 0x19, 0x7e, 0xec, 0x5f, 0x8f, 0x31, 0xe3, 0x74, 0x51, 0x68, 0x04, 0xab, 0x34,
	0x8f, 0xfd, 0xad, 0xff, 0xb8, 0xc9, 0xbe, 0x7a, 0x41, 0xf6, 0xbd, 0x20, 0x3f, 0xbd, 0x20, 0x1f,
	0x83, 0x98, 0xec, 0x07, 0x31, 0xf9, 0x1e, 0xc4, 0xe4, 0x79, 0xe9, 0xea, 0xbd, 0x51, 0x66, 0xdd,
	0x86, 0xfe, 0x6d, 0x57, 0xa3, 0x79, 0x8d, 0x7c, 0xf7, 0xb7, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xd6, 0x79, 0x05, 0xb1, 0x9b, 0x01, 0x00, 0x00,
}

func (m *LoanState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoanState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoanState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintLoanState(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x4a
	}
	if m.DelinquencyDays != 0 {
		i = encodeVarintLoanState(dAtA, i, uint64(m.DelinquencyDays))
		i--
		dAtA[i] = 0x40
	}
	if len(m.NextPaymentDate) > 0 {
		i -= len(m.NextPaymentDate)
		copy(dAtA[i:], m.NextPaymentDate)
		i = encodeVarintLoanState(dAtA, i, uint64(len(m.NextPaymentDate)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.LastPaymentDate) > 0 {
		i -= len(m.LastPaymentDate)
		copy(dAtA[i:], m.LastPaymentDate)
		i = encodeVarintLoanState(dAtA, i, uint64(len(m.LastPaymentDate)))
		i--
		dAtA[i] = 0x32
	}
	if m.PaymentsMade != 0 {
		i = encodeVarintLoanState(dAtA, i, uint64(m.PaymentsMade))
		i--
		dAtA[i] = 0x28
	}
	if m.CurrentBalance != 0 {
		i = encodeVarintLoanState(dAtA, i, uint64(m.CurrentBalance))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintLoanState(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LoanId) > 0 {
		i -= len(m.LoanId)
		copy(dAtA[i:], m.LoanId)
		i = encodeVarintLoanState(dAtA, i, uint64(len(m.LoanId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintLoanState(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLoanState(dAtA []byte, offset int, v uint64) int {
	offset -= sovLoanState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LoanState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovLoanState(uint64(l))
	}
	l = len(m.LoanId)
	if l > 0 {
		n += 1 + l + sovLoanState(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovLoanState(uint64(l))
	}
	if m.CurrentBalance != 0 {
		n += 1 + sovLoanState(uint64(m.CurrentBalance))
	}
	if m.PaymentsMade != 0 {
		n += 1 + sovLoanState(uint64(m.PaymentsMade))
	}
	l = len(m.LastPaymentDate)
	if l > 0 {
		n += 1 + l + sovLoanState(uint64(l))
	}
	l = len(m.NextPaymentDate)
	if l > 0 {
		n += 1 + l + sovLoanState(uint64(l))
	}
	if m.DelinquencyDays != 0 {
		n += 1 + sovLoanState(uint64(m.DelinquencyDays))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovLoanState(uint64(l))
	}
	return n
}

func sovLoanState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLoanState(x uint64) (n int) {
	return sovLoanState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LoanState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoanState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoanState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoanState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoanState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoanState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoanState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoanState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoanState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoanState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoanState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoanState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoanState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentBalance", wireType)
			}
			m.CurrentBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoanState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentBalance |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentsMade", wireType)
			}
			m.PaymentsMade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoanState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentsMade |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPaymentDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoanState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoanState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoanState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastPaymentDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPaymentDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoanState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoanState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoanState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPaymentDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelinquencyDays", wireType)
			}
			m.DelinquencyDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoanState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelinquencyDays |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoanState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoanState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoanState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoanState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoanState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLoanState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLoanState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoanState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoanState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLoanState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLoanState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLoanState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLoanState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLoanState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLoanState = fmt.Errorf("proto: unexpected end of group")
)
