// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ardaos/loan/installment_metadata.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InstallmentMetadata struct {
	Index             string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	LoanId            string `protobuf:"bytes,2,opt,name=loanId,proto3" json:"loanId,omitempty"`
	PaymentAmount     uint64 `protobuf:"varint,3,opt,name=paymentAmount,proto3" json:"paymentAmount,omitempty"`
	PaymentFrequency  string `protobuf:"bytes,4,opt,name=paymentFrequency,proto3" json:"paymentFrequency,omitempty"`
	RemainingPayments uint32 `protobuf:"varint,5,opt,name=remainingPayments,proto3" json:"remainingPayments,omitempty"`
	AmortizationType  string `protobuf:"bytes,6,opt,name=amortizationType,proto3" json:"amortizationType,omitempty"`
	PrepaymentAllowed bool   `protobuf:"varint,7,opt,name=prepaymentAllowed,proto3" json:"prepaymentAllowed,omitempty"`
	Creator           string `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *InstallmentMetadata) Reset()         { *m = InstallmentMetadata{} }
func (m *InstallmentMetadata) String() string { return proto.CompactTextString(m) }
func (*InstallmentMetadata) ProtoMessage()    {}
func (*InstallmentMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_4df1a0728f3b84b8, []int{0}
}
func (m *InstallmentMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstallmentMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstallmentMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstallmentMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallmentMetadata.Merge(m, src)
}
func (m *InstallmentMetadata) XXX_Size() int {
	return m.Size()
}
func (m *InstallmentMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallmentMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_InstallmentMetadata proto.InternalMessageInfo

func (m *InstallmentMetadata) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *InstallmentMetadata) GetLoanId() string {
	if m != nil {
		return m.LoanId
	}
	return ""
}

func (m *InstallmentMetadata) GetPaymentAmount() uint64 {
	if m != nil {
		return m.PaymentAmount
	}
	return 0
}

func (m *InstallmentMetadata) GetPaymentFrequency() string {
	if m != nil {
		return m.PaymentFrequency
	}
	return ""
}

func (m *InstallmentMetadata) GetRemainingPayments() uint32 {
	if m != nil {
		return m.RemainingPayments
	}
	return 0
}

func (m *InstallmentMetadata) GetAmortizationType() string {
	if m != nil {
		return m.AmortizationType
	}
	return ""
}

func (m *InstallmentMetadata) GetPrepaymentAllowed() bool {
	if m != nil {
		return m.PrepaymentAllowed
	}
	return false
}

func (m *InstallmentMetadata) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*InstallmentMetadata)(nil), "ardaos.loan.InstallmentMetadata")
}

func init() {
	proto.RegisterFile("ardaos/loan/installment_metadata.proto", fileDescriptor_4df1a0728f3b84b8)
}

var fileDescriptor_4df1a0728f3b84b8 = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x41, 0x4a, 0xc3, 0x40,
	0x14, 0x86, 0x3b, 0xb5, 0x4d, 0xeb, 0x48, 0x41, 0xc7, 0x22, 0xb3, 0x1a, 0x82, 0x88, 0x04, 0xd1,
	0x64, 0xe1, 0x09, 0x74, 0x21, 0x74, 0x21, 0x48, 0x70, 0xe5, 0x46, 0x9e, 0xcd, 0x43, 0x06, 0x92,
	0x99, 0x38, 0x99, 0x62, 0xe3, 0x29, 0xbc, 0x8d, 0x57, 0x70, 0xd9, 0xa5, 0x4b, 0x49, 0x2e, 0x22,
	0x93, 0xa4, 0x88, 0x66, 0xf9, 0x7f, 0xff, 0x9f, 0x8f, 0xf0, 0x86, 0x9e, 0x82, 0x49, 0x40, 0x17,
	0x51, 0xaa, 0x41, 0x45, 0x52, 0x15, 0x16, 0xd2, 0x34, 0x43, 0x65, 0x1f, 0x33, 0xb4, 0x90, 0x80,
	0x85, 0x30, 0x37, 0xda, 0x6a, 0xb6, 0xd7, 0xee, 0x42, 0xb7, 0x3b, 0xfe, 0x18, 0xd2, 0xc3, 0xc5,
	0xef, 0xf6, 0xb6, 0x9b, 0xb2, 0x39, 0x1d, 0x4b, 0x95, 0xe0, 0x9a, 0x13, 0x9f, 0x04, 0xbb, 0x71,
	0x1b, 0xd8, 0x11, 0xf5, 0xdc, 0x57, 0x8b, 0x84, 0x0f, 0x1b, 0xdc, 0x25, 0x76, 0x42, 0x67, 0x39,
	0x94, 0x4e, 0x70, 0x95, 0xe9, 0x95, 0xb2, 0x7c, 0xc7, 0x27, 0xc1, 0x28, 0xfe, 0x0b, 0xd9, 0x19,
	0xdd, 0xef, 0xc0, 0x8d, 0xc1, 0x97, 0x15, 0xaa, 0x65, 0xc9, 0x47, 0x8d, 0xa7, 0xc7, 0xd9, 0x39,
	0x3d, 0x30, 0x98, 0x81, 0x54, 0x52, 0x3d, 0xdf, 0xb5, 0x65, 0xc1, 0xc7, 0x3e, 0x09, 0x66, 0x71,
	0xbf, 0x70, 0x66, 0xc8, 0xb4, 0xb1, 0xf2, 0x0d, 0xac, 0xd4, 0xea, 0xbe, 0xcc, 0x91, 0x7b, 0xad,
	0xf9, 0x3f, 0x77, 0xe6, 0xdc, 0xe0, 0xf6, 0xcf, 0xd2, 0x54, 0xbf, 0x62, 0xc2, 0x27, 0x3e, 0x09,
	0xa6, 0x71, 0xbf, 0x60, 0x9c, 0x4e, 0x96, 0x06, 0xc1, 0x6a, 0xc3, 0xa7, 0x8d, 0x70, 0x1b, 0xaf,
	0xc3, 0xcf, 0x4a, 0x90, 0x4d, 0x25, 0xc8, 0x77, 0x25, 0xc8, 0x7b, 0x2d, 0x06, 0x9b, 0x5a, 0x0c,
	0xbe, 0x6a, 0x31, 0x78, 0x98, 0xbb, 0x03, 0x5f, 0xe8, 0x22, 0x5a, 0xb7, 0x6f, 0x61, 0xcb, 0x1c,
	0x8b, 0x27, 0xaf, 0xb9, 0xfe, 0xe5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xee, 0xfa, 0xe1, 0x2a,
	0xa7, 0x01, 0x00, 0x00,
}

func (m *InstallmentMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallmentMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstallmentMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintInstallmentMetadata(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x42
	}
	if m.PrepaymentAllowed {
		i--
		if m.PrepaymentAllowed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.AmortizationType) > 0 {
		i -= len(m.AmortizationType)
		copy(dAtA[i:], m.AmortizationType)
		i = encodeVarintInstallmentMetadata(dAtA, i, uint64(len(m.AmortizationType)))
		i--
		dAtA[i] = 0x32
	}
	if m.RemainingPayments != 0 {
		i = encodeVarintInstallmentMetadata(dAtA, i, uint64(m.RemainingPayments))
		i--
		dAtA[i] = 0x28
	}
	if len(m.PaymentFrequency) > 0 {
		i -= len(m.PaymentFrequency)
		copy(dAtA[i:], m.PaymentFrequency)
		i = encodeVarintInstallmentMetadata(dAtA, i, uint64(len(m.PaymentFrequency)))
		i--
		dAtA[i] = 0x22
	}
	if m.PaymentAmount != 0 {
		i = encodeVarintInstallmentMetadata(dAtA, i, uint64(m.PaymentAmount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.LoanId) > 0 {
		i -= len(m.LoanId)
		copy(dAtA[i:], m.LoanId)
		i = encodeVarintInstallmentMetadata(dAtA, i, uint64(len(m.LoanId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintInstallmentMetadata(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInstallmentMetadata(dAtA []byte, offset int, v uint64) int {
	offset -= sovInstallmentMetadata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InstallmentMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovInstallmentMetadata(uint64(l))
	}
	l = len(m.LoanId)
	if l > 0 {
		n += 1 + l + sovInstallmentMetadata(uint64(l))
	}
	if m.PaymentAmount != 0 {
		n += 1 + sovInstallmentMetadata(uint64(m.PaymentAmount))
	}
	l = len(m.PaymentFrequency)
	if l > 0 {
		n += 1 + l + sovInstallmentMetadata(uint64(l))
	}
	if m.RemainingPayments != 0 {
		n += 1 + sovInstallmentMetadata(uint64(m.RemainingPayments))
	}
	l = len(m.AmortizationType)
	if l > 0 {
		n += 1 + l + sovInstallmentMetadata(uint64(l))
	}
	if m.PrepaymentAllowed {
		n += 2
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovInstallmentMetadata(uint64(l))
	}
	return n
}

func sovInstallmentMetadata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInstallmentMetadata(x uint64) (n int) {
	return sovInstallmentMetadata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InstallmentMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstallmentMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallmentMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallmentMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallmentMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstallmentMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInstallmentMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallmentMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstallmentMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInstallmentMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAmount", wireType)
			}
			m.PaymentAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallmentMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentFrequency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallmentMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstallmentMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInstallmentMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentFrequency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingPayments", wireType)
			}
			m.RemainingPayments = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallmentMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainingPayments |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmortizationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallmentMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstallmentMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInstallmentMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmortizationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrepaymentAllowed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallmentMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PrepaymentAllowed = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstallmentMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstallmentMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInstallmentMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInstallmentMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInstallmentMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInstallmentMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInstallmentMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInstallmentMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInstallmentMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInstallmentMetadata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInstallmentMetadata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInstallmentMetadata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInstallmentMetadata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInstallmentMetadata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInstallmentMetadata = fmt.Errorf("proto: unexpected end of group")
)
