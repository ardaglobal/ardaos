// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ardaos/loan/mca_metadata.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type McaMetadata struct {
	Index                     string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	LoanId                    string `protobuf:"bytes,2,opt,name=loanId,proto3" json:"loanId,omitempty"`
	DailyCollectionPercentage string `protobuf:"bytes,3,opt,name=dailyCollectionPercentage,proto3" json:"dailyCollectionPercentage,omitempty"`
	MerchantId                string `protobuf:"bytes,4,opt,name=merchantId,proto3" json:"merchantId,omitempty"`
	ProcessorName             string `protobuf:"bytes,5,opt,name=processorName,proto3" json:"processorName,omitempty"`
	EstimatedTermDays         uint32 `protobuf:"varint,6,opt,name=estimatedTermDays,proto3" json:"estimatedTermDays,omitempty"`
	TotalPaybackAmount        uint64 `protobuf:"varint,7,opt,name=totalPaybackAmount,proto3" json:"totalPaybackAmount,omitempty"`
	DailySalesAverage         uint64 `protobuf:"varint,8,opt,name=dailySalesAverage,proto3" json:"dailySalesAverage,omitempty"`
	Creator                   string `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *McaMetadata) Reset()         { *m = McaMetadata{} }
func (m *McaMetadata) String() string { return proto.CompactTextString(m) }
func (*McaMetadata) ProtoMessage()    {}
func (*McaMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_220f17f9d9ef64e3, []int{0}
}
func (m *McaMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *McaMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_McaMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *McaMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_McaMetadata.Merge(m, src)
}
func (m *McaMetadata) XXX_Size() int {
	return m.Size()
}
func (m *McaMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_McaMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_McaMetadata proto.InternalMessageInfo

func (m *McaMetadata) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *McaMetadata) GetLoanId() string {
	if m != nil {
		return m.LoanId
	}
	return ""
}

func (m *McaMetadata) GetDailyCollectionPercentage() string {
	if m != nil {
		return m.DailyCollectionPercentage
	}
	return ""
}

func (m *McaMetadata) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *McaMetadata) GetProcessorName() string {
	if m != nil {
		return m.ProcessorName
	}
	return ""
}

func (m *McaMetadata) GetEstimatedTermDays() uint32 {
	if m != nil {
		return m.EstimatedTermDays
	}
	return 0
}

func (m *McaMetadata) GetTotalPaybackAmount() uint64 {
	if m != nil {
		return m.TotalPaybackAmount
	}
	return 0
}

func (m *McaMetadata) GetDailySalesAverage() uint64 {
	if m != nil {
		return m.DailySalesAverage
	}
	return 0
}

func (m *McaMetadata) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*McaMetadata)(nil), "ardaos.loan.McaMetadata")
}

func init() { proto.RegisterFile("ardaos/loan/mca_metadata.proto", fileDescriptor_220f17f9d9ef64e3) }

var fileDescriptor_220f17f9d9ef64e3 = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x3f, 0x4f, 0x72, 0x31,
	0x14, 0xc6, 0x29, 0x2f, 0x7f, 0x5e, 0x4a, 0x18, 0x6c, 0x88, 0xa9, 0x4b, 0x43, 0x8c, 0x03, 0x83,
	0x5e, 0x06, 0x57, 0x17, 0xd4, 0x85, 0x01, 0x43, 0xd0, 0xc9, 0xc5, 0x1c, 0xda, 0x13, 0xbd, 0xf1,
	0xf6, 0x96, 0xb4, 0x47, 0xc3, 0xfd, 0x16, 0x7e, 0x2c, 0x47, 0x46, 0x47, 0x03, 0xf1, 0x7b, 0x98,
	0x5b, 0x30, 0xd1, 0xa0, 0xe3, 0xf3, 0xfc, 0x7e, 0x69, 0x7a, 0xf2, 0x70, 0x05, 0xde, 0x80, 0x0b,
	0x83, 0xcc, 0x41, 0x3e, 0xb0, 0x1a, 0xee, 0x2c, 0x12, 0x18, 0x20, 0x48, 0xe6, 0xde, 0x91, 0x13,
	0xed, 0x0d, 0x4f, 0x4a, 0x7e, 0xf8, 0x51, 0xe5, 0xed, 0xb1, 0x86, 0xf1, 0x56, 0x11, 0x5d, 0x5e,
	0x4f, 0x73, 0x83, 0x0b, 0xc9, 0x7a, 0xac, 0xdf, 0x9a, 0x6e, 0x82, 0xd8, 0xe7, 0x8d, 0xd2, 0x1e,
	0x19, 0x59, 0x8d, 0xf5, 0x36, 0x89, 0x33, 0x7e, 0x60, 0x20, 0xcd, 0x8a, 0x0b, 0x97, 0x65, 0xa8,
	0x29, 0x75, 0xf9, 0x04, 0xbd, 0xc6, 0x9c, 0xe0, 0x1e, 0xe5, 0xbf, 0xa8, 0xfe, 0x2d, 0x08, 0xc5,
	0xb9, 0x45, 0xaf, 0x1f, 0x20, 0xa7, 0x91, 0x91, 0xb5, 0xa8, 0x7f, 0x6b, 0xc4, 0x11, 0xef, 0xcc,
	0xbd, 0xd3, 0x18, 0x82, 0xf3, 0x57, 0x60, 0x51, 0xd6, 0xa3, 0xf2, 0xb3, 0x14, 0xc7, 0x7c, 0x0f,
	0x03, 0xa5, 0x16, 0x08, 0xcd, 0x0d, 0x7a, 0x7b, 0x09, 0x45, 0x90, 0x8d, 0x1e, 0xeb, 0x77, 0xa6,
	0xbb, 0x40, 0x24, 0x5c, 0x90, 0x23, 0xc8, 0x26, 0x50, 0xcc, 0x40, 0x3f, 0x0e, 0xad, 0x7b, 0xca,
	0x49, 0x36, 0x7b, 0xac, 0x5f, 0x9b, 0xfe, 0x42, 0xca, 0xd7, 0xe3, 0x01, 0xd7, 0x90, 0x61, 0x18,
	0x3e, 0xa3, 0x2f, 0x2f, 0xfb, 0x1f, 0xf5, 0x5d, 0x20, 0x24, 0x6f, 0x6a, 0x8f, 0x40, 0xce, 0xcb,
	0x56, 0xfc, 0xeb, 0x57, 0x3c, 0x4f, 0x5e, 0x57, 0x8a, 0x2d, 0x57, 0x8a, 0xbd, 0xaf, 0x14, 0x7b,
	0x59, 0xab, 0xca, 0x72, 0xad, 0x2a, 0x6f, 0x6b, 0x55, 0xb9, 0xed, 0x96, 0x73, 0x9c, 0xb8, 0x30,
	0x58, 0x6c, 0x16, 0xa3, 0x62, 0x8e, 0x61, 0xd6, 0x88, 0x5b, 0x9d, 0x7e, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x6f, 0x6a, 0x3d, 0x88, 0xcd, 0x01, 0x00, 0x00,
}

func (m *McaMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McaMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *McaMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMcaMetadata(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x4a
	}
	if m.DailySalesAverage != 0 {
		i = encodeVarintMcaMetadata(dAtA, i, uint64(m.DailySalesAverage))
		i--
		dAtA[i] = 0x40
	}
	if m.TotalPaybackAmount != 0 {
		i = encodeVarintMcaMetadata(dAtA, i, uint64(m.TotalPaybackAmount))
		i--
		dAtA[i] = 0x38
	}
	if m.EstimatedTermDays != 0 {
		i = encodeVarintMcaMetadata(dAtA, i, uint64(m.EstimatedTermDays))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ProcessorName) > 0 {
		i -= len(m.ProcessorName)
		copy(dAtA[i:], m.ProcessorName)
		i = encodeVarintMcaMetadata(dAtA, i, uint64(len(m.ProcessorName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MerchantId) > 0 {
		i -= len(m.MerchantId)
		copy(dAtA[i:], m.MerchantId)
		i = encodeVarintMcaMetadata(dAtA, i, uint64(len(m.MerchantId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DailyCollectionPercentage) > 0 {
		i -= len(m.DailyCollectionPercentage)
		copy(dAtA[i:], m.DailyCollectionPercentage)
		i = encodeVarintMcaMetadata(dAtA, i, uint64(len(m.DailyCollectionPercentage)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LoanId) > 0 {
		i -= len(m.LoanId)
		copy(dAtA[i:], m.LoanId)
		i = encodeVarintMcaMetadata(dAtA, i, uint64(len(m.LoanId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintMcaMetadata(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMcaMetadata(dAtA []byte, offset int, v uint64) int {
	offset -= sovMcaMetadata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *McaMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovMcaMetadata(uint64(l))
	}
	l = len(m.LoanId)
	if l > 0 {
		n += 1 + l + sovMcaMetadata(uint64(l))
	}
	l = len(m.DailyCollectionPercentage)
	if l > 0 {
		n += 1 + l + sovMcaMetadata(uint64(l))
	}
	l = len(m.MerchantId)
	if l > 0 {
		n += 1 + l + sovMcaMetadata(uint64(l))
	}
	l = len(m.ProcessorName)
	if l > 0 {
		n += 1 + l + sovMcaMetadata(uint64(l))
	}
	if m.EstimatedTermDays != 0 {
		n += 1 + sovMcaMetadata(uint64(m.EstimatedTermDays))
	}
	if m.TotalPaybackAmount != 0 {
		n += 1 + sovMcaMetadata(uint64(m.TotalPaybackAmount))
	}
	if m.DailySalesAverage != 0 {
		n += 1 + sovMcaMetadata(uint64(m.DailySalesAverage))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMcaMetadata(uint64(l))
	}
	return n
}

func sovMcaMetadata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMcaMetadata(x uint64) (n int) {
	return sovMcaMetadata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *McaMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMcaMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McaMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McaMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMcaMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMcaMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMcaMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMcaMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMcaMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMcaMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyCollectionPercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMcaMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMcaMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMcaMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DailyCollectionPercentage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMcaMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMcaMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMcaMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerchantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMcaMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMcaMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMcaMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatedTermDays", wireType)
			}
			m.EstimatedTermDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMcaMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EstimatedTermDays |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPaybackAmount", wireType)
			}
			m.TotalPaybackAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMcaMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPaybackAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailySalesAverage", wireType)
			}
			m.DailySalesAverage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMcaMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DailySalesAverage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMcaMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMcaMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMcaMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMcaMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMcaMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMcaMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMcaMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMcaMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMcaMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMcaMetadata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMcaMetadata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMcaMetadata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMcaMetadata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMcaMetadata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMcaMetadata = fmt.Errorf("proto: unexpected end of group")
)
