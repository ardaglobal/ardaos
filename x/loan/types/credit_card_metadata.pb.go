// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ardaos/loan/credit_card_metadata.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreditCardMetadata struct {
	Index           string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	LoanId          string `protobuf:"bytes,2,opt,name=loanId,proto3" json:"loanId,omitempty"`
	CreditLimit     uint64 `protobuf:"varint,3,opt,name=creditLimit,proto3" json:"creditLimit,omitempty"`
	AvailableCredit uint64 `protobuf:"varint,4,opt,name=availableCredit,proto3" json:"availableCredit,omitempty"`
	MinimumPayment  uint64 `protobuf:"varint,5,opt,name=minimumPayment,proto3" json:"minimumPayment,omitempty"`
	DailyRate       string `protobuf:"bytes,6,opt,name=dailyRate,proto3" json:"dailyRate,omitempty"`
	GracePeriodDays uint32 `protobuf:"varint,7,opt,name=gracePeriodDays,proto3" json:"gracePeriodDays,omitempty"`
	OverlimitFee    uint64 `protobuf:"varint,8,opt,name=overlimitFee,proto3" json:"overlimitFee,omitempty"`
	LateFee         uint64 `protobuf:"varint,9,opt,name=lateFee,proto3" json:"lateFee,omitempty"`
	Creator         string `protobuf:"bytes,10,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *CreditCardMetadata) Reset()         { *m = CreditCardMetadata{} }
func (m *CreditCardMetadata) String() string { return proto.CompactTextString(m) }
func (*CreditCardMetadata) ProtoMessage()    {}
func (*CreditCardMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_d77463808a17118b, []int{0}
}
func (m *CreditCardMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreditCardMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreditCardMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreditCardMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreditCardMetadata.Merge(m, src)
}
func (m *CreditCardMetadata) XXX_Size() int {
	return m.Size()
}
func (m *CreditCardMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_CreditCardMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_CreditCardMetadata proto.InternalMessageInfo

func (m *CreditCardMetadata) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *CreditCardMetadata) GetLoanId() string {
	if m != nil {
		return m.LoanId
	}
	return ""
}

func (m *CreditCardMetadata) GetCreditLimit() uint64 {
	if m != nil {
		return m.CreditLimit
	}
	return 0
}

func (m *CreditCardMetadata) GetAvailableCredit() uint64 {
	if m != nil {
		return m.AvailableCredit
	}
	return 0
}

func (m *CreditCardMetadata) GetMinimumPayment() uint64 {
	if m != nil {
		return m.MinimumPayment
	}
	return 0
}

func (m *CreditCardMetadata) GetDailyRate() string {
	if m != nil {
		return m.DailyRate
	}
	return ""
}

func (m *CreditCardMetadata) GetGracePeriodDays() uint32 {
	if m != nil {
		return m.GracePeriodDays
	}
	return 0
}

func (m *CreditCardMetadata) GetOverlimitFee() uint64 {
	if m != nil {
		return m.OverlimitFee
	}
	return 0
}

func (m *CreditCardMetadata) GetLateFee() uint64 {
	if m != nil {
		return m.LateFee
	}
	return 0
}

func (m *CreditCardMetadata) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*CreditCardMetadata)(nil), "ardaos.loan.CreditCardMetadata")
}

func init() {
	proto.RegisterFile("ardaos/loan/credit_card_metadata.proto", fileDescriptor_d77463808a17118b)
}

var fileDescriptor_d77463808a17118b = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xcb, 0x4a, 0x03, 0x31,
	0x14, 0x86, 0x9b, 0xda, 0x8b, 0x4d, 0xbd, 0x40, 0x28, 0x92, 0x85, 0x84, 0xa1, 0x8b, 0x32, 0x1b,
	0xdb, 0x85, 0x6f, 0x60, 0x45, 0x10, 0x14, 0xca, 0x2c, 0xdd, 0x94, 0xd3, 0xc9, 0x41, 0x02, 0xc9,
	0xa4, 0x64, 0x62, 0xe9, 0xbc, 0x85, 0x8f, 0xe5, 0xb2, 0x2b, 0x71, 0x29, 0xed, 0x8b, 0x48, 0x32,
	0x2d, 0x6a, 0x97, 0xff, 0x77, 0xbe, 0xf0, 0x1f, 0x72, 0xe8, 0x08, 0x9c, 0x04, 0x5b, 0x4e, 0xb4,
	0x85, 0x62, 0x92, 0x3b, 0x94, 0xca, 0xcf, 0x73, 0x70, 0x72, 0x6e, 0xd0, 0x83, 0x04, 0x0f, 0xe3,
	0xa5, 0xb3, 0xde, 0xb2, 0x7e, 0xed, 0x8d, 0x83, 0x37, 0xfc, 0x6c, 0x52, 0x36, 0x8d, 0xee, 0x14,
	0x9c, 0x7c, 0xde, 0x9b, 0x6c, 0x40, 0xdb, 0xaa, 0x90, 0xb8, 0xe6, 0x24, 0x21, 0x69, 0x2f, 0xab,
	0x03, 0xbb, 0xa2, 0x9d, 0xf0, 0xe8, 0x51, 0xf2, 0x66, 0xc4, 0xfb, 0xc4, 0x12, 0xda, 0xaf, 0xfb,
	0x9e, 0x94, 0x51, 0x9e, 0x9f, 0x24, 0x24, 0x6d, 0x65, 0x7f, 0x11, 0x4b, 0xe9, 0x25, 0xac, 0x40,
	0x69, 0x58, 0x68, 0xac, 0xeb, 0x78, 0x2b, 0x5a, 0xc7, 0x98, 0x8d, 0xe8, 0x85, 0x51, 0x85, 0x32,
	0x6f, 0x66, 0x06, 0x95, 0xc1, 0xc2, 0xf3, 0x76, 0x14, 0x8f, 0x28, 0xbb, 0xa6, 0x3d, 0x09, 0x4a,
	0x57, 0x19, 0x78, 0xe4, 0x9d, 0xb8, 0xce, 0x2f, 0x08, 0x7d, 0xaf, 0x0e, 0x72, 0x9c, 0xa1, 0x53,
	0x56, 0xde, 0x43, 0x55, 0xf2, 0x6e, 0x42, 0xd2, 0xf3, 0xec, 0x18, 0xb3, 0x21, 0x3d, 0xb3, 0x2b,
	0x74, 0x3a, 0xac, 0xf9, 0x80, 0xc8, 0x4f, 0x63, 0xdb, 0x3f, 0xc6, 0x38, 0xed, 0x6a, 0xf0, 0x18,
	0xc6, 0xbd, 0x38, 0x3e, 0xc4, 0x30, 0xc9, 0x1d, 0x82, 0xb7, 0x8e, 0xd3, 0xb8, 0xc3, 0x21, 0xde,
	0x8d, 0x3f, 0xb6, 0x82, 0x6c, 0xb6, 0x82, 0x7c, 0x6f, 0x05, 0x79, 0xdf, 0x89, 0xc6, 0x66, 0x27,
	0x1a, 0x5f, 0x3b, 0xd1, 0x78, 0x19, 0x84, 0xff, 0xbf, 0xb1, 0xe5, 0x64, 0x5d, 0x9f, 0xca, 0x57,
	0x4b, 0x2c, 0x17, 0x9d, 0x78, 0x9c, 0xdb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3d, 0xc2, 0xf2,
	0xea, 0xc6, 0x01, 0x00, 0x00,
}

func (m *CreditCardMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreditCardMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreditCardMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCreditCardMetadata(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x52
	}
	if m.LateFee != 0 {
		i = encodeVarintCreditCardMetadata(dAtA, i, uint64(m.LateFee))
		i--
		dAtA[i] = 0x48
	}
	if m.OverlimitFee != 0 {
		i = encodeVarintCreditCardMetadata(dAtA, i, uint64(m.OverlimitFee))
		i--
		dAtA[i] = 0x40
	}
	if m.GracePeriodDays != 0 {
		i = encodeVarintCreditCardMetadata(dAtA, i, uint64(m.GracePeriodDays))
		i--
		dAtA[i] = 0x38
	}
	if len(m.DailyRate) > 0 {
		i -= len(m.DailyRate)
		copy(dAtA[i:], m.DailyRate)
		i = encodeVarintCreditCardMetadata(dAtA, i, uint64(len(m.DailyRate)))
		i--
		dAtA[i] = 0x32
	}
	if m.MinimumPayment != 0 {
		i = encodeVarintCreditCardMetadata(dAtA, i, uint64(m.MinimumPayment))
		i--
		dAtA[i] = 0x28
	}
	if m.AvailableCredit != 0 {
		i = encodeVarintCreditCardMetadata(dAtA, i, uint64(m.AvailableCredit))
		i--
		dAtA[i] = 0x20
	}
	if m.CreditLimit != 0 {
		i = encodeVarintCreditCardMetadata(dAtA, i, uint64(m.CreditLimit))
		i--
		dAtA[i] = 0x18
	}
	if len(m.LoanId) > 0 {
		i -= len(m.LoanId)
		copy(dAtA[i:], m.LoanId)
		i = encodeVarintCreditCardMetadata(dAtA, i, uint64(len(m.LoanId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintCreditCardMetadata(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCreditCardMetadata(dAtA []byte, offset int, v uint64) int {
	offset -= sovCreditCardMetadata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreditCardMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovCreditCardMetadata(uint64(l))
	}
	l = len(m.LoanId)
	if l > 0 {
		n += 1 + l + sovCreditCardMetadata(uint64(l))
	}
	if m.CreditLimit != 0 {
		n += 1 + sovCreditCardMetadata(uint64(m.CreditLimit))
	}
	if m.AvailableCredit != 0 {
		n += 1 + sovCreditCardMetadata(uint64(m.AvailableCredit))
	}
	if m.MinimumPayment != 0 {
		n += 1 + sovCreditCardMetadata(uint64(m.MinimumPayment))
	}
	l = len(m.DailyRate)
	if l > 0 {
		n += 1 + l + sovCreditCardMetadata(uint64(l))
	}
	if m.GracePeriodDays != 0 {
		n += 1 + sovCreditCardMetadata(uint64(m.GracePeriodDays))
	}
	if m.OverlimitFee != 0 {
		n += 1 + sovCreditCardMetadata(uint64(m.OverlimitFee))
	}
	if m.LateFee != 0 {
		n += 1 + sovCreditCardMetadata(uint64(m.LateFee))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCreditCardMetadata(uint64(l))
	}
	return n
}

func sovCreditCardMetadata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCreditCardMetadata(x uint64) (n int) {
	return sovCreditCardMetadata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreditCardMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCreditCardMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreditCardMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreditCardMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreditCardMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCreditCardMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCreditCardMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreditCardMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCreditCardMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCreditCardMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditLimit", wireType)
			}
			m.CreditLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreditCardMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreditLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableCredit", wireType)
			}
			m.AvailableCredit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreditCardMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvailableCredit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumPayment", wireType)
			}
			m.MinimumPayment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreditCardMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumPayment |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreditCardMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCreditCardMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCreditCardMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DailyRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GracePeriodDays", wireType)
			}
			m.GracePeriodDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreditCardMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GracePeriodDays |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverlimitFee", wireType)
			}
			m.OverlimitFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreditCardMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverlimitFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LateFee", wireType)
			}
			m.LateFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreditCardMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LateFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCreditCardMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCreditCardMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCreditCardMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCreditCardMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCreditCardMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCreditCardMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCreditCardMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCreditCardMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCreditCardMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCreditCardMetadata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCreditCardMetadata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCreditCardMetadata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCreditCardMetadata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCreditCardMetadata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCreditCardMetadata = fmt.Errorf("proto: unexpected end of group")
)
