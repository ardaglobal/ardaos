name: Security Audit

on:
  # Run on schedule (daily at 2 AM UTC)
  schedule:
    - cron: "0 2 * * *"
  # Run on pull requests to main branch
  pull_request:
    branches: [main]
  # Run on pushes to main branch
  push:
    branches: [main]
  # Allow manual triggering
  workflow_dispatch:

jobs:
  security-audit:
    name: Security Vulnerability Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run govulncheck
        run: |
          echo "Running security vulnerability scan..."
          govulncheck -show=symbol ./...
        continue-on-error: true

      - name: Run govulncheck with JSON output
        run: |
          echo "Running govulncheck with detailed output..."
          govulncheck -json ./... > vuln-report.json || true
        continue-on-error: true

      - name: Upload vulnerability report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vulnerability-report
          path: vuln-report.json
          retention-days: 30

      - name: Comment on PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let report = '## Security Audit Results\n\n';

            try {
              if (fs.existsSync('vuln-report.json')) {
                const vulnData = JSON.parse(fs.readFileSync('vuln-report.json', 'utf8'));

                if (vulnData.Vulns && vulnData.Vulns.length > 0) {
                  report += '⚠️ **Vulnerabilities found:**\n\n';
                  vulnData.Vulns.forEach(vuln => {
                    report += `- **${vuln.OSV.ID}**: ${vuln.OSV.Summary}\n`;
                    report += `  - Severity: ${vuln.OSV.Database_specific?.severity || 'Unknown'}\n`;
                    report += `  - Affected packages: ${vuln.PkgPath}\n`;
                    if (vuln.OSV.References && vuln.OSV.References.length > 0) {
                      report += `  - Reference: ${vuln.OSV.References[0].URL}\n`;
                    }
                    report += '\n';
                  });
                } else {
                  report += '✅ **No vulnerabilities found!**\n\n';
                }
              } else {
                report += 'ℹ️ **Vulnerability report not available**\n\n';
              }
            } catch (error) {
              report += '❌ **Error processing vulnerability report**\n\n';
            }

            report += '---\n*This audit was automatically generated by govulncheck*';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  dependency-audit:
    name: Dependency Security Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run go mod verify
        run: go mod verify

      - name: Check for outdated dependencies
        run: |
          echo "Checking for outdated dependencies..."
          go list -u -m all | grep -E "\[" || echo "All dependencies are up to date"

      - name: Run go mod tidy check
        run: |
          echo "Checking if go.mod and go.sum are in sync..."
          cp go.mod go.mod.backup
          cp go.sum go.sum.backup
          go mod tidy
          if ! cmp -s go.mod go.mod.backup || ! cmp -s go.sum go.sum.backup; then
            echo "go.mod or go.sum needs to be updated"
            exit 1
          fi
          echo "go.mod and go.sum are in sync"
