name: Compliance Compiler CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'tools/compliance-compiler/**'
      - '.github/workflows/compliance-compiler.yml'
    tags:
      - 'compliance-compiler-v*'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'tools/compliance-compiler/**'
      - '.github/workflows/compliance-compiler.yml'

env:
  GO_VERSION: '1.21'
  GOLANGCI_LINT_VERSION: 'v1.61.0'

defaults:
  run:
    working-directory: tools/compliance-compiler

jobs:
  # =============================================================================
  # Code Quality and Testing Jobs
  # =============================================================================

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: make deps

      - name: Check formatting
        run: make fmt-check

      - name: Run go vet
        run: make vet

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          working-directory: tools/compliance-compiler
          args: --timeout=5m

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: make deps

      - name: Run tests with coverage
        run: make ci-test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./tools/compliance-compiler/coverage.out
          flags: compliance-compiler
          name: compliance-compiler-${{ matrix.go-version }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-security-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-security-
            ${{ runner.os }}-go-

      - name: Run security checks
        run: make ci-security

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec.sarif ./...'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec.sarif

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-integration-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-integration-
            ${{ runner.os }}-go-

      - name: Build compliance compiler
        run: make build

      - name: Run integration tests
        run: make integration-test

      - name: Validate example policies
        run: make validate-examples

      - name: Run performance tests
        run: make benchmark-regression

  # =============================================================================
  # Build Jobs
  # =============================================================================

  build:
    name: Build Cross-Platform
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-build-
            ${{ runner.os }}-go-

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          make deps
          OUTPUT_NAME=compliance-compiler-${{ matrix.goos }}-${{ matrix.goarch }}
          if [ "${{ matrix.goos }}" = "windows" ]; then
            OUTPUT_NAME="${OUTPUT_NAME}.exe"
          fi
          mkdir -p bin
          CGO_ENABLED=0 go build \
            -a -installsuffix cgo \
            -ldflags "-s -w -X main.version=${{ github.ref_name }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.gitCommit=${{ github.sha }} -X main.gitBranch=${{ github.ref_name }}" \
            -o bin/${OUTPUT_NAME} \
            ./cmd/compliance-compiler

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: compliance-compiler-${{ matrix.goos }}-${{ matrix.goarch }}
          path: tools/compliance-compiler/bin/compliance-compiler-*
          retention-days: 7

  # =============================================================================
  # Docker Jobs
  # =============================================================================

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [integration]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ardaos/compliance-compiler
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: tools/compliance-compiler
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}
            BUILD_TIME=${{ github.event.head_commit.timestamp }}
            GIT_COMMIT=${{ github.sha }}

  # =============================================================================
  # Release Jobs
  # =============================================================================

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: startsWith(github.ref, 'refs/tags/compliance-compiler-v')
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p dist/
          cd artifacts/
          for dir in compliance-compiler-*; do
            if [ -d "$dir" ]; then
              cd "$dir"
              for file in compliance-compiler-*; do
                if [ -f "$file" ]; then
                  if [[ "$file" == *"windows"* ]]; then
                    zip "../../dist/${file%.exe}.zip" "$file" ../../README.md ../../LICENSE
                  else
                    tar -czf "../../dist/${file}.tar.gz" "$file" -C ../../ README.md LICENSE
                  fi
                fi
              done
              cd ..
            fi
          done
          cd ../dist/
          sha256sum * > SHA256SUMS

      - name: Extract release notes
        id: release_notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/compliance-compiler-v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          if [ -f CHANGELOG.md ]; then
            awk "/^## \[$VERSION\]/{flag=1;next}/^## \[/{flag=0}flag" CHANGELOG.md > release_notes.md
          else
            echo "Release $VERSION of ArdaOS Compliance Compiler" > release_notes.md
            echo "" >> release_notes.md
            echo "## Changes" >> release_notes.md
            echo "- See commit history for detailed changes" >> release_notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Compliance Compiler v${{ steps.release_notes.outputs.version }}
          body_path: release_notes.md
          files: |
            dist/*
          draft: false
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # =============================================================================
  # Performance Monitoring
  # =============================================================================

  performance:
    name: Performance Regression
    runs-on: ubuntu-latest
    needs: [integration]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-perf-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-perf-
            ${{ runner.os }}-go-

      - name: Run performance benchmarks
        run: |
          make deps
          make bench > bench-pr.txt

      - name: Compare with main branch
        run: |
          git checkout main
          make deps
          make bench > bench-main.txt
          git checkout -

      - name: Install benchcmp
        run: go install golang.org/x/tools/cmd/benchcmp@latest

      - name: Compare benchmarks
        run: |
          benchcmp bench-main.txt bench-pr.txt > bench-comparison.txt || true

      - name: Comment PR with benchmark results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const comparison = fs.readFileSync('tools/compliance-compiler/bench-comparison.txt', 'utf8');
            const body = `## 📊 Performance Benchmark Results

            \`\`\`
            ${comparison}
            \`\`\`

            *Benchmarks compare this PR against the main branch.*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # =============================================================================
  # Notification Jobs
  # =============================================================================

  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [lint, test, security, integration, build]
    if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Notify Slack on Failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#arda-ci'
          text: |
            🚨 Compliance Compiler CI failed on main branch

            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}

            Failed jobs: ${{ needs.*.result }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

# =============================================================================
# Workflow Configuration
# =============================================================================

concurrency:
  group: compliance-compiler-${{ github.ref }}
  cancel-in-progress: true
