syntax = "proto3";
package ardaos.compliance.v1;

import "ardaos/compliance/v1/policy.proto";
import "google/api/annotations.proto";
import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/ardaOS/ardaOS/api/ardaos/compliance/v1";

// Msg defines the compliance module's transaction messages
service Msg {
  option (cosmos.msg.v1.service) = true;

  // CreatePolicy creates a new compliance policy
  rpc CreatePolicy(MsgCreatePolicy) returns (MsgCreatePolicyResponse);

  // UpdatePolicy updates an existing compliance policy
  rpc UpdatePolicy(MsgUpdatePolicy) returns (MsgUpdatePolicyResponse);

  // DeletePolicy deactivates a compliance policy
  rpc DeletePolicy(MsgDeletePolicy) returns (MsgDeletePolicyResponse);

  // ActivatePolicy activates a policy for enforcement
  rpc ActivatePolicy(MsgActivatePolicy) returns (MsgActivatePolicyResponse);

  // DeactivatePolicy deactivates a policy from enforcement
  rpc DeactivatePolicy(MsgDeactivatePolicy) returns (MsgDeactivatePolicyResponse);

  // SubmitAttestation submits an attestation for compliance verification
  rpc SubmitAttestation(MsgSubmitAttestation) returns (MsgSubmitAttestationResponse);

  // RevokeAttestation revokes a previously submitted attestation
  rpc RevokeAttestation(MsgRevokeAttestation) returns (MsgRevokeAttestationResponse);

  // VerifyAttestation verifies an attestation (for authorized verifiers)
  rpc VerifyAttestation(MsgVerifyAttestation) returns (MsgVerifyAttestationResponse);

  // ResolveViolation marks a compliance violation as resolved
  rpc ResolveViolation(MsgResolveViolation) returns (MsgResolveViolationResponse);

  // GrantExemption grants a temporary exemption from a policy
  rpc GrantExemption(MsgGrantExemption) returns (MsgGrantExemptionResponse);

  // RevokeExemption revokes a previously granted exemption
  rpc RevokeExemption(MsgRevokeExemption) returns (MsgRevokeExemptionResponse);

  // UpdateParams updates the module parameters
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgCreatePolicy creates a new compliance policy
message MsgCreatePolicy {
  option (cosmos.msg.v1.signer) = "authority";

  string authority = 1; // The authority creating the policy (typically gov module)
  CompliancePolicy policy = 2 [(gogoproto.nullable) = false];
}

message MsgCreatePolicyResponse {
  string policy_id = 1;
  string version = 2;
}

// MsgUpdatePolicy updates an existing compliance policy
message MsgUpdatePolicy {
  option (cosmos.msg.v1.signer) = "authority";

  string authority = 1;
  string policy_id = 2;
  CompliancePolicy policy = 3 [(gogoproto.nullable) = false];
  string reason = 4; // Reason for the update
}

message MsgUpdatePolicyResponse {
  string policy_id = 1;
  string new_version = 2;
}

// MsgDeletePolicy deactivates a compliance policy
message MsgDeletePolicy {
  option (cosmos.msg.v1.signer) = "authority";

  string authority = 1;
  string policy_id = 2;
  string version = 3; // Optional, defaults to latest
  string reason = 4; // Reason for deletion
}

message MsgDeletePolicyResponse {}

// MsgActivatePolicy activates a policy for enforcement
message MsgActivatePolicy {
  option (cosmos.msg.v1.signer) = "authority";

  string authority = 1;
  string policy_id = 2;
  string version = 3; // Optional, defaults to latest
  string effective_date = 4; // ISO 8601 timestamp, optional (defaults to now)
}

message MsgActivatePolicyResponse {}

// MsgDeactivatePolicy deactivates a policy from enforcement
message MsgDeactivatePolicy {
  option (cosmos.msg.v1.signer) = "authority";

  string authority = 1;
  string policy_id = 2;
  string version = 3; // Optional, defaults to latest
  string reason = 4;
}

message MsgDeactivatePolicyResponse {}

// MsgSubmitAttestation submits an attestation for compliance verification
message MsgSubmitAttestation {
  option (cosmos.msg.v1.signer) = "submitter";

  string submitter = 1; // Account submitting the attestation
  string account_address = 2; // Account the attestation is for (can be same as submitter)
  AttestationType type = 3;
  bytes data = 4; // Encrypted or hashed attestation data
  string data_hash = 5; // Hash of the attestation data for verification
  repeated string supporting_documents = 6; // IPFS hashes or URLs to supporting docs
  string expiry_date = 7; // ISO 8601 timestamp, optional
  map<string, string> metadata = 8;
}

message MsgSubmitAttestationResponse {
  string attestation_id = 1;
}

// MsgRevokeAttestation revokes a previously submitted attestation
message MsgRevokeAttestation {
  option (cosmos.msg.v1.signer) = "submitter";

  string submitter = 1;
  string attestation_id = 2;
  string reason = 3;
}

message MsgRevokeAttestationResponse {}

// MsgVerifyAttestation verifies an attestation (for authorized verifiers)
message MsgVerifyAttestation {
  option (cosmos.msg.v1.signer) = "verifier";

  string verifier = 1; // Must be an authorized verifier
  string attestation_id = 2;
  bool approved = 3;
  string verification_notes = 4;
  repeated string verification_documents = 5; // Additional verification docs
  string valid_until = 6; // ISO 8601 timestamp for verification validity
}

message MsgVerifyAttestationResponse {}

// MsgResolveViolation marks a compliance violation as resolved
message MsgResolveViolation {
  option (cosmos.msg.v1.signer) = "resolver";

  string resolver = 1; // Must be authorized to resolve violations
  string violation_id = 2;
  string resolution_method = 3;
  string resolution_notes = 4;
  repeated string supporting_evidence = 5;
}

message MsgResolveViolationResponse {}

// MsgGrantExemption grants a temporary exemption from a policy
message MsgGrantExemption {
  option (cosmos.msg.v1.signer) = "authority";

  string authority = 1;
  string account_address = 2;
  string policy_id = 3;
  repeated string rule_names = 4; // Specific rules to exempt, empty means entire policy
  string reason = 5;
  string valid_from = 6; // ISO 8601 timestamp
  string valid_until = 7; // ISO 8601 timestamp
  ExemptionConditions conditions = 8;
}

message ExemptionConditions {
  int64 max_transaction_amount = 1; // Maximum transaction amount for exemption
  int64 max_total_amount = 2; // Maximum total amount across all transactions
  repeated string allowed_counterparties = 3; // Specific counterparties allowed
  repeated string required_approvals = 4; // Required approval authorities
  map<string, google.protobuf.Any> custom_conditions = 5;
}

message MsgGrantExemptionResponse {
  string exemption_id = 1;
}

// MsgRevokeExemption revokes a previously granted exemption
message MsgRevokeExemption {
  option (cosmos.msg.v1.signer) = "authority";

  string authority = 1;
  string exemption_id = 2;
  string reason = 3;
}

message MsgRevokeExemptionResponse {}

// MsgUpdateParams updates the module parameters
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  string authority = 1; // The authority updating the params (typically gov module)
  Params params = 2 [(gogoproto.nullable) = false];
}

message MsgUpdateParamsResponse {}

// Module parameters
message Params {
  // Maximum number of policies per jurisdiction
  int64 max_policies_per_jurisdiction = 1;

  // Maximum number of rules per policy
  int64 max_rules_per_policy = 2;

  // Maximum number of attestation requirements per policy
  int64 max_attestations_per_policy = 3;

  // Default attestation validity period in seconds
  int64 default_attestation_validity_seconds = 4;

  // Maximum exemption duration in seconds
  int64 max_exemption_duration_seconds = 5;

  // Authorized policy creators (addresses that can create policies)
  repeated string authorized_policy_creators = 6;

  // Authorized verifiers (addresses that can verify attestations)
  repeated string authorized_verifiers = 7;

  // Authorized violation resolvers
  repeated string authorized_violation_resolvers = 8;

  // Enable automatic policy evaluation on transactions
  bool enable_automatic_evaluation = 9;

  // Enable violation alerts
  bool enable_violation_alerts = 10;

  // Maximum evaluation time in milliseconds
  int64 max_evaluation_time_ms = 11;

  // Enable policy caching for performance
  bool enable_policy_caching = 12;

  // Cache TTL in seconds
  int64 cache_ttl_seconds = 13;

  // Enable audit logging
  bool enable_audit_logging = 14;

  // Minimum enforcement level for transaction blocking
  EnforcementLevel min_blocking_level = 15;

  // Default grace period for violations in seconds
  int64 default_grace_period_seconds = 16;

  // Enable cross-jurisdiction policy application
  bool enable_cross_jurisdiction = 17;

  // Maximum policy evaluation depth (for nested predicates)
  int64 max_evaluation_depth = 18;

  // Enable policy version migration
  bool enable_version_migration = 19;

  // Require digital signatures for attestations
  bool require_attestation_signatures = 20;
}

// Additional message types for complex operations

// Policy activation/deactivation status
message PolicyStatus {
  string policy_id = 1;
  string version = 2;
  bool active = 3;
  string activated_at = 4;
  string deactivated_at = 5;
  string activated_by = 6;
  string deactivated_by = 7;
  string reason = 8;
}

// Exemption record
message PolicyExemption {
  string id = 1;
  string account_address = 2;
  string policy_id = 3;
  repeated string exempted_rules = 4;
  string reason = 5;
  string granted_by = 6;
  string granted_at = 7;
  string valid_from = 8;
  string valid_until = 9;
  ExemptionConditions conditions = 10;
  bool active = 11;
  string revoked_at = 12;
  string revoked_by = 13;
  string revocation_reason = 14;
}

// Attestation verification record
message AttestationVerification {
  string attestation_id = 1;
  string verifier = 2;
  bool approved = 3;
  string verified_at = 4;
  string verification_notes = 5;
  repeated string verification_documents = 6;
  string valid_until = 7;
  string verification_method = 8;
  map<string, string> verification_metadata = 9;
}
