syntax = "proto3";
package ardaos.compliance.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/ardaOS/ardaOS/api/ardaos/compliance/v1";

// Expression evaluation system for complex mathematical and logical operations
message Expression {
  // Core expression definition
  string expression_string = 1; // The expression as a string
  ExpressionLanguage language = 2; // Expression language/syntax
  ExpressionType type = 3; // Type of expression

  // Context and variables
  map<string, google.protobuf.Any> variables = 4; // Variable bindings
  repeated string required_fields = 5; // Fields required from context
  ExpressionContext default_context = 6; // Default context values

  // Compilation and optimization
  bytes compiled_bytecode = 7; // Compiled expression bytecode
  string compilation_hash = 8; // Hash of compiled expression
  bool pre_compiled = 9; // Whether expression is pre-compiled

  // Security and validation
  ExpressionSecurity security = 10; // Security constraints
  ExpressionValidation validation = 11; // Validation rules

  // Performance and caching
  ExpressionPerformance performance = 12; // Performance settings
  ExpressionMetadata metadata = 13; // Expression metadata
}

// Supported expression languages
enum ExpressionLanguage {
  EXPRESSION_LANGUAGE_UNSPECIFIED = 0;
  EXPRESSION_LANGUAGE_CEL = 1; // Common Expression Language (Google)
  EXPRESSION_LANGUAGE_JSONPATH = 2; // JSONPath expressions
  EXPRESSION_LANGUAGE_JMESPATH = 3; // JMESPath expressions
  EXPRESSION_LANGUAGE_JAVASCRIPT = 4; // JavaScript expressions (sandboxed)
  EXPRESSION_LANGUAGE_GOLANG = 5; // Go-like expressions
  EXPRESSION_LANGUAGE_PYTHON = 6; // Python expressions (sandboxed)
  EXPRESSION_LANGUAGE_SQL = 7; // SQL-like expressions
  EXPRESSION_LANGUAGE_XPATH = 8; // XPath expressions
  EXPRESSION_LANGUAGE_REGEX = 9; // Regular expressions
  EXPRESSION_LANGUAGE_MATHEMATICAL = 10; // Mathematical expressions
  EXPRESSION_LANGUAGE_CUSTOM = 100; // Custom expression language
}

// Types of expressions
enum ExpressionType {
  EXPRESSION_TYPE_UNSPECIFIED = 0;
  EXPRESSION_TYPE_BOOLEAN = 1; // Boolean result (true/false)
  EXPRESSION_TYPE_NUMERIC = 2; // Numeric result
  EXPRESSION_TYPE_STRING = 3; // String result
  EXPRESSION_TYPE_ARRAY = 4; // Array result
  EXPRESSION_TYPE_OBJECT = 5; // Object result
  EXPRESSION_TYPE_DATETIME = 6; // DateTime result
  EXPRESSION_TYPE_AGGREGATION = 7; // Aggregation expression
  EXPRESSION_TYPE_TRANSFORMATION = 8; // Data transformation
  EXPRESSION_TYPE_VALIDATION = 9; // Validation expression
  EXPRESSION_TYPE_CALCULATION = 10; // Financial/mathematical calculation
}

// Expression execution context
message ExpressionContext {
  map<string, google.protobuf.Any> variables = 1; // Context variables
  map<string, Function> functions = 2; // Available functions
  repeated string allowed_fields = 3; // Allowed field access patterns
  ExpressionEnvironment environment = 4; // Execution environment
  SecurityContext security_context = 5; // Security context
}

message ExpressionEnvironment {
  string timezone = 1; // Default timezone
  string locale = 2; // Default locale
  string currency = 3; // Default currency
  map<string, string> constants = 4; // Environment constants
  int64 max_execution_time_ms = 5; // Maximum execution time
  int64 max_memory_bytes = 6; // Maximum memory usage
}

message SecurityContext {
  repeated string allowed_operations = 1; // Allowed operations
  repeated string blocked_operations = 2; // Blocked operations
  repeated string allowed_functions = 3; // Allowed function calls
  repeated string blocked_functions = 4; // Blocked function calls
  bool allow_external_calls = 5; // Allow external API calls
  bool allow_file_access = 6; // Allow file system access
  bool allow_network_access = 7; // Allow network access
  int32 max_recursion_depth = 8; // Maximum recursion depth
}

// Function definition for expressions
message Function {
  string name = 1; // Function name
  string description = 2; // Function description
  FunctionCategory category = 3; // Function category
  repeated FunctionParameter parameters = 4; // Function parameters
  FunctionReturn return_type = 5; // Return type
  bool pure_function = 6; // Whether function has no side effects
  bool deterministic = 7; // Whether function is deterministic
  FunctionImplementation implementation = 8; // Function implementation
}

enum FunctionCategory {
  FUNCTION_CATEGORY_UNSPECIFIED = 0;
  FUNCTION_CATEGORY_MATHEMATICAL = 1; // Math functions (sin, cos, sqrt, etc.)
  FUNCTION_CATEGORY_STRING = 2; // String functions (concat, substring, etc.)
  FUNCTION_CATEGORY_DATE_TIME = 3; // Date/time functions
  FUNCTION_CATEGORY_ARRAY = 4; // Array functions (map, filter, reduce)
  FUNCTION_CATEGORY_OBJECT = 5; // Object manipulation functions
  FUNCTION_CATEGORY_VALIDATION = 6; // Validation functions
  FUNCTION_CATEGORY_CONVERSION = 7; // Type conversion functions
  FUNCTION_CATEGORY_AGGREGATION = 8; // Aggregation functions (sum, avg, etc.)
  FUNCTION_CATEGORY_FINANCIAL = 9; // Financial calculations
  FUNCTION_CATEGORY_STATISTICAL = 10; // Statistical functions
  FUNCTION_CATEGORY_CRYPTOGRAPHIC = 11; // Cryptographic functions
  FUNCTION_CATEGORY_EXTERNAL_DATA = 12; // External data access
  FUNCTION_CATEGORY_COMPLIANCE = 13; // Compliance-specific functions
  FUNCTION_CATEGORY_CUSTOM = 100; // Custom functions
}

message FunctionParameter {
  string name = 1; // Parameter name
  string description = 2; // Parameter description
  ParameterType type = 3; // Parameter type
  bool required = 4; // Whether parameter is required
  google.protobuf.Any default_value = 5; // Default value
  repeated string validation_rules = 6; // Validation rules
}

enum ParameterType {
  PARAMETER_TYPE_UNSPECIFIED = 0;
  PARAMETER_TYPE_ANY = 1; // Any type
  PARAMETER_TYPE_STRING = 2; // String type
  PARAMETER_TYPE_INTEGER = 3; // Integer type
  PARAMETER_TYPE_FLOAT = 4; // Float type
  PARAMETER_TYPE_BOOLEAN = 5; // Boolean type
  PARAMETER_TYPE_ARRAY = 6; // Array type
  PARAMETER_TYPE_OBJECT = 7; // Object type
  PARAMETER_TYPE_DATETIME = 8; // DateTime type
  PARAMETER_TYPE_DECIMAL = 9; // Decimal type (for financial calculations)
  PARAMETER_TYPE_FUNCTION = 10; // Function type (higher-order functions)
}

message FunctionReturn {
  ParameterType type = 1; // Return type
  string description = 2; // Return description
  bool nullable = 3; // Whether return can be null
}

message FunctionImplementation {
  oneof implementation_type {
    NativeImplementation native = 1; // Native implementation
    ExpressionImplementation expression = 2; // Expression-based implementation
    ExternalImplementation external = 3; // External service implementation
  }
}

message NativeImplementation {
  string handler = 1; // Native function handler identifier
  map<string, string> configuration = 2; // Handler configuration
}

message ExpressionImplementation {
  string expression = 1; // Implementation expression
  ExpressionLanguage language = 2; // Expression language
  map<string, string> bindings = 3; // Parameter bindings
}

message ExternalImplementation {
  string endpoint = 1; // External service endpoint
  string method = 2; // HTTP method (GET, POST, etc.)
  map<string, string> headers = 3; // HTTP headers
  string body_template = 4; // Request body template
  ResponseMapping response_mapping = 5; // Response mapping
  AuthenticationConfig auth = 6; // Authentication configuration
}

message ResponseMapping {
  string result_path = 1; // Path to result in response
  string error_path = 2; // Path to error in response
  map<string, string> field_mappings = 3; // Field mappings
}

message AuthenticationConfig {
  oneof auth_type {
    string api_key = 1;
    BearerToken bearer_token = 2;
    BasicAuth basic_auth = 3;
    OAuth oauth = 4;
  }
}

message BearerToken {
  string token = 1;
  google.protobuf.Timestamp expires_at = 2 [(gogoproto.stdtime) = true];
}

message BasicAuth {
  string username = 1;
  string password = 2;
}

message OAuth {
  string client_id = 1;
  string client_secret = 2;
  string token_url = 3;
  repeated string scopes = 4;
}

// Security constraints for expressions
message ExpressionSecurity {
  SecurityLevel level = 1; // Security level
  repeated SecurityRestriction restrictions = 2; // Security restrictions
  bool sandbox_execution = 3; // Execute in sandbox
  SandboxConfig sandbox_config = 4; // Sandbox configuration
  bool require_code_review = 5; // Require code review for expressions
  repeated string approved_by = 6; // Addresses that approved this expression
}

enum SecurityLevel {
  SECURITY_LEVEL_UNSPECIFIED = 0;
  SECURITY_LEVEL_UNRESTRICTED = 1; // No security restrictions
  SECURITY_LEVEL_LOW = 2; // Basic security restrictions
  SECURITY_LEVEL_MEDIUM = 3; // Moderate security restrictions
  SECURITY_LEVEL_HIGH = 4; // High security restrictions
  SECURITY_LEVEL_CRITICAL = 5; // Maximum security restrictions
}

enum SecurityRestriction {
  SECURITY_RESTRICTION_UNSPECIFIED = 0;
  SECURITY_RESTRICTION_NO_EXTERNAL_CALLS = 1; // No external API calls
  SECURITY_RESTRICTION_NO_FILE_ACCESS = 2; // No file system access
  SECURITY_RESTRICTION_NO_NETWORK_ACCESS = 3; // No network access
  SECURITY_RESTRICTION_NO_SYSTEM_CALLS = 4; // No system calls
  SECURITY_RESTRICTION_LIMITED_MEMORY = 5; // Limited memory usage
  SECURITY_RESTRICTION_LIMITED_CPU = 6; // Limited CPU usage
  SECURITY_RESTRICTION_LIMITED_FUNCTIONS = 7; // Limited function set
  SECURITY_RESTRICTION_READ_ONLY_CONTEXT = 8; // Read-only context access
}

message SandboxConfig {
  int64 max_execution_time_ms = 1; // Maximum execution time
  int64 max_memory_bytes = 2; // Maximum memory usage
  int64 max_cpu_time_ms = 3; // Maximum CPU time
  int32 max_recursion_depth = 4; // Maximum recursion depth
  bool allow_loops = 5; // Allow loop constructs
  bool allow_functions = 6; // Allow function definitions
  repeated string allowed_modules = 7; // Allowed modules/libraries
  repeated string blocked_keywords = 8; // Blocked keywords
}

// Expression validation rules
message ExpressionValidation {
  repeated ValidationRule rules = 1; // Validation rules
  bool strict_mode = 2; // Strict validation mode
  bool type_checking = 3; // Enable type checking
  bool syntax_checking = 4; // Enable syntax checking
  bool security_scanning = 5; // Enable security scanning
  StaticAnalysis static_analysis = 6; // Static analysis configuration
}

message ValidationRule {
  string name = 1; // Rule name
  ValidationRuleType type = 2; // Rule type
  string description = 3; // Rule description
  google.protobuf.Any parameters = 4; // Rule parameters
  ValidationSeverity severity = 5; // Rule severity
  bool enabled = 6; // Whether rule is enabled
}

enum ValidationRuleType {
  VALIDATION_RULE_TYPE_UNSPECIFIED = 0;
  VALIDATION_RULE_TYPE_SYNTAX = 1; // Syntax validation
  VALIDATION_RULE_TYPE_TYPE_SAFETY = 2; // Type safety validation
  VALIDATION_RULE_TYPE_SECURITY = 3; // Security validation
  VALIDATION_RULE_TYPE_PERFORMANCE = 4; // Performance validation
  VALIDATION_RULE_TYPE_COMPLEXITY = 5; // Complexity validation
  VALIDATION_RULE_TYPE_DEPENDENCY = 6; // Dependency validation
  VALIDATION_RULE_TYPE_CUSTOM = 100; // Custom validation
}

enum ValidationSeverity {
  VALIDATION_SEVERITY_UNSPECIFIED = 0;
  VALIDATION_SEVERITY_INFO = 1; // Informational
  VALIDATION_SEVERITY_WARNING = 2; // Warning
  VALIDATION_SEVERITY_ERROR = 3; // Error
  VALIDATION_SEVERITY_CRITICAL = 4; // Critical error
}

message StaticAnalysis {
  bool enabled = 1;
  repeated AnalysisRule rules = 2; // Analysis rules
  bool detect_infinite_loops = 3; // Detect potential infinite loops
  bool detect_performance_issues = 4; // Detect performance issues
  bool detect_security_issues = 5; // Detect security issues
  int32 max_complexity_score = 6; // Maximum complexity score
}

message AnalysisRule {
  string name = 1; // Rule name
  string pattern = 2; // Pattern to match (regex or AST pattern)
  string message = 3; // Error/warning message
  ValidationSeverity severity = 4; // Rule severity
  bool enabled = 5; // Whether rule is enabled
}

// Performance configuration for expressions
message ExpressionPerformance {
  PerformanceProfile profile = 1; // Performance profile
  CachingConfig caching = 2; // Caching configuration
  OptimizationConfig optimization = 3; // Optimization settings
  ResourceLimits limits = 4; // Resource limits
  PerformanceMonitoring monitoring = 5; // Performance monitoring
}

enum PerformanceProfile {
  PERFORMANCE_PROFILE_UNSPECIFIED = 0;
  PERFORMANCE_PROFILE_FAST = 1; // Optimize for speed
  PERFORMANCE_PROFILE_BALANCED = 2; // Balance speed and memory
  PERFORMANCE_PROFILE_MEMORY_EFFICIENT = 3; // Optimize for memory
  PERFORMANCE_PROFILE_LOW_LATENCY = 4; // Optimize for low latency
  PERFORMANCE_PROFILE_HIGH_THROUGHPUT = 5; // Optimize for throughput
}

message CachingConfig {
  bool enabled = 1;
  CachingStrategy strategy = 2; // Caching strategy
  int64 ttl_seconds = 3; // Time to live
  int64 max_cache_size = 4; // Maximum cache size
  string cache_key_template = 5; // Cache key template
  bool cache_negative_results = 6; // Cache negative results
}

enum CachingStrategy {
  CACHING_STRATEGY_UNSPECIFIED = 0;
  CACHING_STRATEGY_LRU = 1; // Least Recently Used
  CACHING_STRATEGY_LFU = 2; // Least Frequently Used
  CACHING_STRATEGY_FIFO = 3; // First In, First Out
  CACHING_STRATEGY_TTL = 4; // Time-based expiration
  CACHING_STRATEGY_ADAPTIVE = 5; // Adaptive caching
}

message OptimizationConfig {
  bool enabled = 1;
  repeated OptimizationType optimizations = 2; // Enabled optimizations
  bool compile_to_bytecode = 3; // Compile to bytecode
  bool inline_functions = 4; // Inline function calls
  bool constant_folding = 5; // Constant folding optimization
  bool dead_code_elimination = 6; // Dead code elimination
}

enum OptimizationType {
  OPTIMIZATION_TYPE_UNSPECIFIED = 0;
  OPTIMIZATION_TYPE_CONSTANT_FOLDING = 1; // Constant folding
  OPTIMIZATION_TYPE_DEAD_CODE_ELIMINATION = 2; // Dead code elimination
  OPTIMIZATION_TYPE_FUNCTION_INLINING = 3; // Function inlining
  OPTIMIZATION_TYPE_LOOP_UNROLLING = 4; // Loop unrolling
  OPTIMIZATION_TYPE_COMMON_SUBEXPRESSION_ELIMINATION = 5; // CSE
  OPTIMIZATION_TYPE_VECTORIZATION = 6; // Vectorization
}

message ResourceLimits {
  int64 max_execution_time_ms = 1; // Maximum execution time
  int64 max_memory_bytes = 2; // Maximum memory usage
  int64 max_cpu_time_ms = 3; // Maximum CPU time
  int32 max_stack_depth = 4; // Maximum stack depth
  int32 max_loop_iterations = 5; // Maximum loop iterations
  int32 max_function_calls = 6; // Maximum function calls
}

message PerformanceMonitoring {
  bool enabled = 1;
  repeated PerformanceMetric metrics = 2; // Metrics to collect
  int64 sampling_interval_ms = 3; // Sampling interval
  bool profile_memory = 4; // Profile memory usage
  bool profile_cpu = 5; // Profile CPU usage
  string metrics_endpoint = 6; // Metrics collection endpoint
}

enum PerformanceMetric {
  PERFORMANCE_METRIC_UNSPECIFIED = 0;
  PERFORMANCE_METRIC_EXECUTION_TIME = 1; // Execution time
  PERFORMANCE_METRIC_MEMORY_USAGE = 2; // Memory usage
  PERFORMANCE_METRIC_CPU_USAGE = 3; // CPU usage
  PERFORMANCE_METRIC_CACHE_HIT_RATE = 4; // Cache hit rate
  PERFORMANCE_METRIC_FUNCTION_CALLS = 5; // Function call count
  PERFORMANCE_METRIC_LOOP_ITERATIONS = 6; // Loop iteration count
  PERFORMANCE_METRIC_COMPILATION_TIME = 7; // Compilation time
}

// Expression metadata
message ExpressionMetadata {
  string name = 1; // Expression name
  string description = 2; // Expression description
  string version = 3; // Expression version
  repeated string tags = 4; // Expression tags
  string author = 5 [(cosmos_proto.scalar) = "cosmos.AddressString"]; // Expression author
  google.protobuf.Timestamp created_at = 6 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  google.protobuf.Timestamp updated_at = 7 [(gogoproto.stdtime) = true];

  // Documentation and examples
  string documentation = 8; // Expression documentation
  repeated ExpressionExample examples = 9; // Usage examples
  repeated string test_cases = 10; // Test cases

  // Dependencies and relationships
  repeated string dependencies = 11; // Expression dependencies
  repeated string used_by = 12; // Where this expression is used
  int32 complexity_score = 13; // Complexity score

  // Usage statistics
  ExpressionUsageStats usage_stats = 14; // Usage statistics
  map<string, string> custom_metadata = 15; // Custom metadata
}

message ExpressionExample {
  string name = 1; // Example name
  string description = 2; // Example description
  string input = 3; // Example input
  string expected_output = 4; // Expected output
  map<string, google.protobuf.Any> context = 5; // Example context
}

message ExpressionUsageStats {
  int64 total_evaluations = 1; // Total evaluation count
  int64 successful_evaluations = 2; // Successful evaluations
  int64 failed_evaluations = 3; // Failed evaluations
  double average_execution_time_ms = 4; // Average execution time
  double cache_hit_rate = 5; // Cache hit rate
  google.protobuf.Timestamp last_used = 6 [(gogoproto.stdtime) = true]; // Last usage time
}

// Expression evaluation result
message ExpressionEvaluationResult {
  bool success = 1; // Whether evaluation succeeded
  google.protobuf.Any result = 2; // Evaluation result
  string error_message = 3; // Error message if failed
  ExpressionEvaluationMetadata metadata = 4; // Evaluation metadata
  repeated ExpressionStep steps = 5; // Evaluation steps (for debugging)
}

message ExpressionEvaluationMetadata {
  google.protobuf.Timestamp started_at = 1 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  google.protobuf.Timestamp completed_at = 2 [(gogoproto.stdtime) = true];
  int64 execution_time_ms = 3; // Execution time in milliseconds
  int64 memory_used_bytes = 4; // Memory used during evaluation
  int32 function_calls = 5; // Number of function calls
  int32 loop_iterations = 6; // Number of loop iterations
  bool cache_hit = 7; // Whether result came from cache
  string evaluator_id = 8; // Evaluator instance identifier
}

message ExpressionStep {
  string step_type = 1; // Type of step (parse, compile, execute, etc.)
  string description = 2; // Step description
  google.protobuf.Any input = 3; // Step input
  google.protobuf.Any output = 4; // Step output
  bool success = 5; // Whether step succeeded
  string error_message = 6; // Error message if step failed
  int64 execution_time_ms = 7; // Step execution time
}

// Expression compilation result
message ExpressionCompilationResult {
  bool success = 1; // Whether compilation succeeded
  bytes bytecode = 2; // Compiled bytecode
  string bytecode_hash = 3; // Hash of compiled bytecode
  repeated CompilationWarning warnings = 4; // Compilation warnings
  string error_message = 5; // Error message if compilation failed
  CompilationMetadata metadata = 6; // Compilation metadata
}

message CompilationWarning {
  string code = 1; // Warning code
  string message = 2; // Warning message
  int32 line = 3; // Line number
  int32 column = 4; // Column number
  ValidationSeverity severity = 5; // Warning severity
}

message CompilationMetadata {
  google.protobuf.Timestamp compiled_at = 1 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  int64 compilation_time_ms = 2; // Compilation time
  string compiler_version = 3; // Compiler version
  int32 bytecode_size = 4; // Bytecode size in bytes
  repeated string optimizations_applied = 5; // Applied optimizations
}
