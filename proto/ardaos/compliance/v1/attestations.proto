syntax = "proto3";
package ardaos.compliance.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/ardaOS/ardaOS/api/ardaos/compliance/v1";

// External data requirements and attestation system for compliance verification
message AttestationRequirement {
  // Core identification
  string name = 1; // Unique name within policy
  string description = 2; // Human-readable description
  AttestationType type = 3; // Type of attestation required
  bool required = 4; // Whether this attestation is mandatory

  // Data requirements
  repeated string required_fields = 5; // Required data fields
  repeated DataSource acceptable_sources = 6; // Acceptable data sources
  AttestationMetadata metadata = 7;

  // Validation and verification
  VerificationRequirements verification = 8;
  repeated AttestationCondition conditions = 9; // Conditions for acceptance

  // Lifecycle management
  AttestationLifecycle lifecycle = 10;
  repeated string dependencies = 11; // Other attestations this depends on
}

// Comprehensive attestation types for regulatory compliance
enum AttestationType {
  ATTESTATION_TYPE_UNSPECIFIED = 0;

  // Identity and KYC
  ATTESTATION_TYPE_KYC = 1; // Know Your Customer
  ATTESTATION_TYPE_IDENTITY_VERIFICATION = 2; // Government ID verification
  ATTESTATION_TYPE_BIOMETRIC_VERIFICATION = 3; // Biometric identity proof
  ATTESTATION_TYPE_LIVENESS_CHECK = 4; // Live person verification

  // Anti-Money Laundering
  ATTESTATION_TYPE_AML = 5; // Anti-Money Laundering check
  ATTESTATION_TYPE_SANCTION_SCREENING = 6; // Sanctions list screening
  ATTESTATION_TYPE_PEP_CHECK = 7; // Politically Exposed Person check
  ATTESTATION_TYPE_ADVERSE_MEDIA = 8; // Negative news screening

  // Financial Status and Accreditation
  ATTESTATION_TYPE_ACCREDITED_INVESTOR = 9; // Accredited investor status
  ATTESTATION_TYPE_QUALIFIED_PURCHASER = 10; // Qualified purchaser status
  ATTESTATION_TYPE_INSTITUTIONAL = 11; // Institutional investor status
  ATTESTATION_TYPE_SOPHISTICATED_INVESTOR = 12; // Sophisticated investor status

  // Financial Information
  ATTESTATION_TYPE_FINANCIAL_STATEMENT = 13; // Audited financial statements
  ATTESTATION_TYPE_CREDIT_RATING = 14; // Credit rating or score
  ATTESTATION_TYPE_INCOME_VERIFICATION = 15; // Income verification
  ATTESTATION_TYPE_NET_WORTH = 16; // Net worth verification
  ATTESTATION_TYPE_LIQUIDITY_PROOF = 17; // Proof of liquid assets

  // Tax and Regulatory
  ATTESTATION_TYPE_TAX_STATUS = 18; // Tax resident status
  ATTESTATION_TYPE_TAX_CLASSIFICATION = 19; // Tax entity classification
  ATTESTATION_TYPE_FATCA_CRS = 20; // FATCA/CRS compliance
  ATTESTATION_TYPE_W8_W9 = 21; // US tax forms

  // Regulatory Approvals
  ATTESTATION_TYPE_REGULATORY_APPROVAL = 22; // General regulatory approval
  ATTESTATION_TYPE_BANKING_LICENSE = 23; // Banking license verification
  ATTESTATION_TYPE_INVESTMENT_ADVISOR = 24; // Investment advisor registration
  ATTESTATION_TYPE_BROKER_DEALER = 25; // Broker-dealer registration

  // Jurisdiction and Legal
  ATTESTATION_TYPE_JURISDICTION_PROOF = 26; // Legal jurisdiction proof
  ATTESTATION_TYPE_LEGAL_ENTITY = 27; // Legal entity verification
  ATTESTATION_TYPE_CORPORATE_REGISTRATION = 28; // Corporate registration
  ATTESTATION_TYPE_BENEFICIAL_OWNERSHIP = 29; // Beneficial ownership disclosure

  // Business and Operational
  ATTESTATION_TYPE_BUSINESS_LICENSE = 30; // Business operating license
  ATTESTATION_TYPE_PROFESSIONAL_LICENSE = 31; // Professional license
  ATTESTATION_TYPE_INSURANCE_PROOF = 32; // Insurance coverage proof
  ATTESTATION_TYPE_OPERATIONAL_CAPACITY = 33; // Operational capability proof

  // Technology and Security
  ATTESTATION_TYPE_SECURITY_AUDIT = 34; // Security audit certification
  ATTESTATION_TYPE_DATA_PROTECTION = 35; // Data protection compliance
  ATTESTATION_TYPE_CYBERSECURITY = 36; // Cybersecurity certification
  ATTESTATION_TYPE_TECHNICAL_CAPABILITY = 37; // Technical capability proof

  // ESG and Sustainability
  ATTESTATION_TYPE_ESG_RATING = 38; // ESG rating or certification
  ATTESTATION_TYPE_SUSTAINABILITY = 39; // Sustainability certification
  ATTESTATION_TYPE_CARBON_FOOTPRINT = 40; // Carbon footprint disclosure

  // Custom and Extended
  ATTESTATION_TYPE_CUSTOM = 100; // Custom attestation type
}

// Data source definitions for attestations
message DataSource {
  string name = 1; // Source name/identifier
  DataSourceType type = 2; // Type of data source
  string endpoint = 3; // API endpoint or connection string
  DataSourceCredentials credentials = 4; // Authentication credentials
  DataSourceConfiguration config = 5; // Source-specific configuration
  TrustLevel trust_level = 6; // Trust level of this source
  repeated string supported_attestation_types = 7; // Supported attestation types
}

enum DataSourceType {
  DATA_SOURCE_TYPE_UNSPECIFIED = 0;
  DATA_SOURCE_TYPE_API = 1; // REST/GraphQL API
  DATA_SOURCE_TYPE_DATABASE = 2; // Database connection
  DATA_SOURCE_TYPE_DOCUMENT = 3; // Document upload
  DATA_SOURCE_TYPE_ORACLE = 4; // Blockchain oracle
  DATA_SOURCE_TYPE_VERIFIER = 5; // Third-party verifier
  DATA_SOURCE_TYPE_GOVERNMENT = 6; // Government database
  DATA_SOURCE_TYPE_CREDIT_BUREAU = 7; // Credit reporting agency
  DATA_SOURCE_TYPE_FINANCIAL_INSTITUTION = 8; // Bank or financial institution
  DATA_SOURCE_TYPE_REGULATORY_BODY = 9; // Regulatory authority
  DATA_SOURCE_TYPE_IDENTITY_PROVIDER = 10; // Identity verification service
  DATA_SOURCE_TYPE_SELF_ATTESTATION = 11; // Self-provided information
}

message DataSourceCredentials {
  oneof credential_type {
    ApiKey api_key = 1;
    OAuth oauth = 2;
    Certificate certificate = 3;
    BasicAuth basic_auth = 4;
    BearerToken bearer_token = 5;
  }

  bool encrypted = 6; // Whether credentials are encrypted
  string encryption_key_id = 7; // Encryption key identifier
}

message ApiKey {
  string key = 1;
  string header_name = 2; // HTTP header name (default: "X-API-Key")
}

message OAuth {
  string client_id = 1;
  string client_secret = 2;
  string authorization_url = 3;
  string token_url = 4;
  repeated string scopes = 5;
}

message Certificate {
  bytes certificate = 1; // X.509 certificate
  bytes private_key = 2; // Private key (encrypted)
  string passphrase = 3; // Private key passphrase
}

message BasicAuth {
  string username = 1;
  string password = 2;
}

message BearerToken {
  string token = 1;
  google.protobuf.Timestamp expires_at = 2 [(gogoproto.stdtime) = true];
}

message DataSourceConfiguration {
  int64 timeout_ms = 1; // Request timeout
  int32 max_retries = 2; // Maximum retry attempts
  int64 rate_limit_per_minute = 3; // Rate limiting
  bool cache_enabled = 4; // Enable response caching
  int64 cache_ttl_seconds = 5; // Cache time-to-live
  map<string, string> custom_headers = 6; // Custom HTTP headers
  map<string, string> parameters = 7; // Source-specific parameters
}

enum TrustLevel {
  TRUST_LEVEL_UNSPECIFIED = 0;
  TRUST_LEVEL_LOW = 1; // Self-attestation, minimal verification
  TRUST_LEVEL_MEDIUM = 2; // Third-party verification
  TRUST_LEVEL_HIGH = 3; // Authoritative source, strong verification
  TRUST_LEVEL_GOVERNMENT = 4; // Government or regulatory source
  TRUST_LEVEL_CERTIFIED = 5; // Certified/audited source
}

// Verification requirements for attestations
message VerificationRequirements {
  repeated string required_verifiers = 1; // Required verifier addresses
  int32 min_verifications = 2; // Minimum number of verifications
  VerificationMethod method = 3; // Verification method
  bool require_consensus = 4; // Require verifier consensus
  double consensus_threshold = 5; // Agreement threshold (0.0-1.0)

  // Digital signature requirements
  bool require_digital_signature = 6;
  repeated string accepted_signature_algorithms = 7;
  bool require_timestamp = 8;
  bool require_notarization = 9;

  // Document requirements
  DocumentRequirements document_requirements = 10;
}

enum VerificationMethod {
  VERIFICATION_METHOD_UNSPECIFIED = 0;
  VERIFICATION_METHOD_MANUAL = 1; // Manual human verification
  VERIFICATION_METHOD_AUTOMATED = 2; // Automated verification
  VERIFICATION_METHOD_HYBRID = 3; // Combined manual and automated
  VERIFICATION_METHOD_CONSENSUS = 4; // Multi-verifier consensus
  VERIFICATION_METHOD_CRYPTOGRAPHIC = 5; // Cryptographic proof
  VERIFICATION_METHOD_BIOMETRIC = 6; // Biometric verification
}

message DocumentRequirements {
  repeated DocumentType required_documents = 1;
  bool require_original_documents = 2;
  bool accept_certified_copies = 3;
  int32 max_document_age_days = 4;
  repeated string accepted_formats = 5; // PDF, JPG, PNG, etc.
  int64 max_file_size_bytes = 6;
  bool require_metadata = 7;
  bool require_digital_signature = 8;
}

enum DocumentType {
  DOCUMENT_TYPE_UNSPECIFIED = 0;
  DOCUMENT_TYPE_GOVERNMENT_ID = 1;
  DOCUMENT_TYPE_PASSPORT = 2;
  DOCUMENT_TYPE_DRIVERS_LICENSE = 3;
  DOCUMENT_TYPE_UTILITY_BILL = 4;
  DOCUMENT_TYPE_BANK_STATEMENT = 5;
  DOCUMENT_TYPE_TAX_RETURN = 6;
  DOCUMENT_TYPE_FINANCIAL_STATEMENT = 7;
  DOCUMENT_TYPE_CERTIFICATE = 8;
  DOCUMENT_TYPE_LICENSE = 9;
  DOCUMENT_TYPE_CORPORATE_DOCUMENTS = 10;
  DOCUMENT_TYPE_PROOF_OF_ADDRESS = 11;
  DOCUMENT_TYPE_INCOME_PROOF = 12;
}

// Conditions for attestation acceptance
message AttestationCondition {
  string name = 1;
  string description = 2;
  ConditionType type = 3;
  google.protobuf.Any parameters = 4; // Condition-specific parameters
  bool required = 5; // Whether this condition is mandatory
}

enum ConditionType {
  CONDITION_TYPE_UNSPECIFIED = 0;
  CONDITION_TYPE_EXPIRY_CHECK = 1; // Document/attestation not expired
  CONDITION_TYPE_ISSUER_VERIFICATION = 2; // Verify document issuer
  CONDITION_TYPE_CROSS_REFERENCE = 3; // Cross-reference with other data
  CONDITION_TYPE_THRESHOLD_CHECK = 4; // Numeric threshold validation
  CONDITION_TYPE_FORMAT_VALIDATION = 5; // Format/structure validation
  CONDITION_TYPE_CONSISTENCY_CHECK = 6; // Data consistency validation
  CONDITION_TYPE_FRESHNESS_CHECK = 7; // Data recency validation
  CONDITION_TYPE_COMPLETENESS_CHECK = 8; // Data completeness validation
}

// Attestation lifecycle management
message AttestationLifecycle {
  int64 validity_duration_seconds = 1; // How long attestation is valid
  bool renewable = 2; // Whether attestation can be renewed
  int64 renewal_window_seconds = 3; // Window before expiry for renewal
  bool auto_renewal = 4; // Automatic renewal if possible

  // Update and refresh policies
  RefreshPolicy refresh_policy = 5;
  repeated string refresh_triggers = 6; // Events that trigger refresh

  // Expiry and cleanup
  ExpiryBehavior expiry_behavior = 7;
  bool cascade_expiry = 8; // Whether expiry affects dependent attestations
}

message RefreshPolicy {
  RefreshStrategy strategy = 1;
  int64 refresh_interval_seconds = 2; // Periodic refresh interval
  double confidence_threshold = 3; // Confidence threshold for refresh
  bool refresh_on_use = 4; // Refresh when attestation is used
}

enum RefreshStrategy {
  REFRESH_STRATEGY_UNSPECIFIED = 0;
  REFRESH_STRATEGY_NEVER = 1; // Never refresh automatically
  REFRESH_STRATEGY_PERIODIC = 2; // Refresh at fixed intervals
  REFRESH_STRATEGY_ON_DEMAND = 3; // Refresh when requested
  REFRESH_STRATEGY_ADAPTIVE = 4; // Adaptive refresh based on usage/risk
  REFRESH_STRATEGY_EVENT_DRIVEN = 5; // Refresh on specific events
}

enum ExpiryBehavior {
  EXPIRY_BEHAVIOR_UNSPECIFIED = 0;
  EXPIRY_BEHAVIOR_STRICT = 1; // Immediately invalid on expiry
  EXPIRY_BEHAVIOR_GRACE_PERIOD = 2; // Grace period after expiry
  EXPIRY_BEHAVIOR_DEGRADED = 3; // Reduced trust level after expiry
  EXPIRY_BEHAVIOR_WARNING = 4; // Warning but still accepted
}

// Metadata for attestation requirements
message AttestationMetadata {
  string category = 1; // Attestation category
  repeated string tags = 2; // Classification tags
  int32 priority = 3; // Processing priority
  RiskLevel risk_level = 4; // Risk level of this attestation

  // Regulatory and compliance information
  repeated string regulatory_citations = 5; // Relevant regulations
  string compliance_framework = 6; // Compliance framework
  repeated string jurisdictions = 7; // Applicable jurisdictions

  // Technical metadata
  string documentation_url = 8; // Documentation link
  string contact_email = 9; // Contact for questions
  map<string, string> custom_fields = 10; // Custom metadata fields

  // Processing hints
  ProcessingHints processing_hints = 11;
}

enum RiskLevel {
  RISK_LEVEL_UNSPECIFIED = 0;
  RISK_LEVEL_LOW = 1;
  RISK_LEVEL_MEDIUM = 2;
  RISK_LEVEL_HIGH = 3;
  RISK_LEVEL_CRITICAL = 4;
}

message ProcessingHints {
  bool parallel_processing = 1; // Can be processed in parallel
  int64 estimated_processing_time_ms = 2; // Estimated processing time
  repeated string preferred_verifiers = 3; // Preferred verifier addresses
  bool cache_result = 4; // Whether to cache verification result
  int32 retry_attempts = 5; // Number of retry attempts on failure
}

// Attestation submission and verification records
message AttestationSubmission {
  string id = 1; // Unique submission ID
  string attestation_requirement_name = 2; // Reference to requirement
  string account_address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Submitted data
  repeated AttestationData data = 4;
  repeated AttestationDocument documents = 5;

  // Submission metadata
  string submitted_by = 6 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  google.protobuf.Timestamp submitted_at = 7 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  string data_hash = 8; // Hash of submitted data for integrity

  // Status and verification
  AttestationStatus status = 9;
  repeated VerificationRecord verifications = 10;

  // Lifecycle
  google.protobuf.Timestamp expires_at = 11 [(gogoproto.stdtime) = true];
  int32 version = 12; // Version number for updates
}

message AttestationData {
  string field_name = 1; // Field name from requirement
  google.protobuf.Any value = 2; // Field value
  DataSource source = 3; // Data source information
  google.protobuf.Timestamp collected_at = 4 [(gogoproto.stdtime) = true];
  string hash = 5; // Hash of the data for integrity
  bool encrypted = 6; // Whether data is encrypted
  string encryption_key_id = 7; // Encryption key identifier
}

message AttestationDocument {
  string document_type = 1;
  bytes content = 2; // Document content (may be encrypted)
  string content_type = 3; // MIME type
  string filename = 4;
  int64 size_bytes = 5;
  string hash = 6; // Document hash for integrity

  // Document metadata
  map<string, string> metadata = 7;
  google.protobuf.Timestamp created_at = 8 [(gogoproto.stdtime) = true];
  string issuer = 9; // Document issuer/authority
  google.protobuf.Timestamp issued_at = 10 [(gogoproto.stdtime) = true];
  google.protobuf.Timestamp expires_at = 11 [(gogoproto.stdtime) = true];

  // Security
  bool encrypted = 12;
  string encryption_algorithm = 13;
  repeated DigitalSignature signatures = 14;
}

message DigitalSignature {
  string algorithm = 1;
  bytes signature = 2;
  string signer = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  google.protobuf.Timestamp signed_at = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  bytes certificate = 5; // X.509 certificate (optional)
}

enum AttestationStatus {
  ATTESTATION_STATUS_UNSPECIFIED = 0;
  ATTESTATION_STATUS_SUBMITTED = 1; // Submitted, pending verification
  ATTESTATION_STATUS_UNDER_REVIEW = 2; // Being reviewed by verifiers
  ATTESTATION_STATUS_VERIFIED = 3; // Successfully verified
  ATTESTATION_STATUS_REJECTED = 4; // Rejected by verifiers
  ATTESTATION_STATUS_EXPIRED = 5; // Expired and no longer valid
  ATTESTATION_STATUS_REVOKED = 6; // Revoked by submitter or authority
  ATTESTATION_STATUS_SUSPENDED = 7; // Temporarily suspended
  ATTESTATION_STATUS_REQUIRES_UPDATE = 8; // Needs to be updated
}

message VerificationRecord {
  string id = 1; // Verification record ID
  string verifier_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  VerificationDecision decision = 3;
  string reason = 4; // Reason for decision

  // Verification details
  google.protobuf.Timestamp verified_at = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  VerificationMethod method = 6;
  double confidence_score = 7; // Confidence level (0.0-1.0)
  repeated string checks_performed = 8; // List of verification checks

  // Evidence and documentation
  repeated string evidence_hashes = 9; // Hashes of verification evidence
  string verification_notes = 10; // Additional notes
  map<string, google.protobuf.Any> metadata = 11; // Verification metadata

  // Validity
  google.protobuf.Timestamp valid_until = 12 [(gogoproto.stdtime) = true];
  bool renewable = 13;
}

enum VerificationDecision {
  VERIFICATION_DECISION_UNSPECIFIED = 0;
  VERIFICATION_DECISION_APPROVED = 1; // Approved without conditions
  VERIFICATION_DECISION_APPROVED_WITH_CONDITIONS = 2; // Approved with conditions
  VERIFICATION_DECISION_REJECTED = 3; // Rejected
  VERIFICATION_DECISION_REQUIRES_MORE_INFO = 4; // Needs additional information
  VERIFICATION_DECISION_DEFERRED = 5; // Decision deferred
  VERIFICATION_DECISION_ESCALATED = 6; // Escalated to higher authority
}
