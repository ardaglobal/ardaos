syntax = "proto3";
package ardaos.compliance.v1;

import "ardaos/compliance/v1/policy.proto";
import "ardaos/compliance/v1/tx.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/ardaOS/ardaOS/api/ardaos/compliance/v1";

// EventPolicyCreated is emitted when a new compliance policy is created
message EventPolicyCreated {
  string policy_id = 1;
  string version = 2;
  string jurisdiction = 3;
  string asset_class = 4;
  string created_by = 5;
  string created_at = 6; // ISO 8601 timestamp
  int32 rule_count = 7;
  int32 attestation_count = 8;
  repeated string tags = 9;
}

// EventPolicyUpdated is emitted when a compliance policy is updated
message EventPolicyUpdated {
  string policy_id = 1;
  string old_version = 2;
  string new_version = 3;
  string updated_by = 4;
  string updated_at = 5; // ISO 8601 timestamp
  string reason = 6;
  repeated string changed_fields = 7;
}

// EventPolicyDeleted is emitted when a compliance policy is deleted/deactivated
message EventPolicyDeleted {
  string policy_id = 1;
  string version = 2;
  string deleted_by = 3;
  string deleted_at = 4; // ISO 8601 timestamp
  string reason = 5;
}

// EventPolicyActivated is emitted when a policy is activated for enforcement
message EventPolicyActivated {
  string policy_id = 1;
  string version = 2;
  string activated_by = 3;
  string activated_at = 4; // ISO 8601 timestamp
  string effective_date = 5; // ISO 8601 timestamp
  string jurisdiction = 6;
  string asset_class = 7;
}

// EventPolicyDeactivated is emitted when a policy is deactivated
message EventPolicyDeactivated {
  string policy_id = 1;
  string version = 2;
  string deactivated_by = 3;
  string deactivated_at = 4; // ISO 8601 timestamp
  string reason = 5;
}

// EventAttestationSubmitted is emitted when an attestation is submitted
message EventAttestationSubmitted {
  string attestation_id = 1;
  string account_address = 2;
  AttestationType type = 3;
  string submitted_by = 4;
  string submitted_at = 5; // ISO 8601 timestamp
  string expires_at = 6; // ISO 8601 timestamp
  string data_hash = 7;
  int32 document_count = 8;
}

// EventAttestationVerified is emitted when an attestation is verified
message EventAttestationVerified {
  string attestation_id = 1;
  string account_address = 2;
  AttestationType type = 3;
  string verifier = 4;
  string verified_at = 5; // ISO 8601 timestamp
  bool approved = 6;
  string valid_until = 7; // ISO 8601 timestamp
  string verification_method = 8;
}

// EventAttestationRevoked is emitted when an attestation is revoked
message EventAttestationRevoked {
  string attestation_id = 1;
  string account_address = 2;
  AttestationType type = 3;
  string revoked_by = 4;
  string revoked_at = 5; // ISO 8601 timestamp
  string reason = 6;
}

// EventComplianceViolation is emitted when a compliance violation occurs
message EventComplianceViolation {
  string violation_id = 1;
  string account_address = 2;
  string policy_id = 3;
  string rule_name = 4;
  string violation_type = 5;
  string message = 6;
  string transaction_hash = 7;
  int64 block_height = 8;
  EnforcementAction action_taken = 9;
  EnforcementLevel severity = 10;
  string occurred_at = 11; // ISO 8601 timestamp
}

// EventViolationResolved is emitted when a compliance violation is resolved
message EventViolationResolved {
  string violation_id = 1;
  string account_address = 2;
  string policy_id = 3;
  string resolver = 4;
  string resolved_at = 5; // ISO 8601 timestamp
  string resolution_method = 6;
  string resolution_notes = 7;
}

// EventExemptionGranted is emitted when a policy exemption is granted
message EventExemptionGranted {
  string exemption_id = 1;
  string account_address = 2;
  string policy_id = 3;
  repeated string exempted_rules = 4;
  string granted_by = 5;
  string granted_at = 6; // ISO 8601 timestamp
  string valid_from = 7; // ISO 8601 timestamp
  string valid_until = 8; // ISO 8601 timestamp
  string reason = 9;
}

// EventExemptionRevoked is emitted when a policy exemption is revoked
message EventExemptionRevoked {
  string exemption_id = 1;
  string account_address = 2;
  string policy_id = 3;
  string revoked_by = 4;
  string revoked_at = 5; // ISO 8601 timestamp
  string reason = 6;
}

// EventPolicyEvaluated is emitted when a policy is evaluated against a transaction
message EventPolicyEvaluated {
  string policy_id = 1;
  string version = 2;
  string account_address = 3;
  string transaction_hash = 4;
  bool compliant = 5;
  string evaluated_at = 6; // ISO 8601 timestamp
  int64 execution_time_ms = 7;
  int32 rules_evaluated = 8;
  int32 rules_passed = 9;
  repeated string failed_rules = 10;
}

// EventTransactionBlocked is emitted when a transaction is blocked by compliance
message EventTransactionBlocked {
  string transaction_hash = 1;
  string account_address = 2;
  repeated string blocking_policies = 3;
  repeated string violation_reasons = 4;
  string blocked_at = 5; // ISO 8601 timestamp
  EnforcementLevel severity = 6;
  bool appealable = 7;
}

// EventComplianceAlert is emitted for compliance alerts
message EventComplianceAlert {
  string alert_id = 1;
  AlertSeverity severity = 2;
  string alert_type = 3;
  string account_address = 4;
  string policy_id = 5;
  string message = 6;
  repeated string recipients = 7;
  string triggered_at = 8; // ISO 8601 timestamp
  map<string, string> metadata = 9;
}

// EventVerifierRegistered is emitted when a new verifier is registered
message EventVerifierRegistered {
  string verifier_address = 1;
  string organization_name = 2;
  repeated AttestationType authorized_types = 3;
  repeated string authorized_jurisdictions = 4;
  string registered_by = 5;
  string registered_at = 6; // ISO 8601 timestamp
  string license_number = 7;
}

// EventVerifierDeactivated is emitted when a verifier is deactivated
message EventVerifierDeactivated {
  string verifier_address = 1;
  string organization_name = 2;
  string deactivated_by = 3;
  string deactivated_at = 4; // ISO 8601 timestamp
  string reason = 5;
}

// EventJurisdictionConfigured is emitted when jurisdiction settings are updated
message EventJurisdictionConfigured {
  string jurisdiction = 1;
  string configured_by = 2;
  string configured_at = 3; // ISO 8601 timestamp
  repeated string changed_settings = 4;
  bool active = 5;
}

// EventAssetClassConfigured is emitted when asset class settings are updated
message EventAssetClassConfigured {
  string asset_class = 1;
  string configured_by = 2;
  string configured_at = 3; // ISO 8601 timestamp
  repeated string changed_settings = 4;
  bool active = 5;
}

// EventParametersUpdated is emitted when module parameters are updated
message EventParametersUpdated {
  string updated_by = 1;
  string updated_at = 2; // ISO 8601 timestamp
  repeated string changed_parameters = 3;
}

// EventPolicyMigrated is emitted when a policy is migrated to a new version
message EventPolicyMigrated {
  string policy_id = 1;
  string from_version = 2;
  string to_version = 3;
  string migrated_by = 4;
  string migrated_at = 5; // ISO 8601 timestamp
  bool automatic_migration = 6;
  string migration_reason = 7;
}

// EventAttestationExpired is emitted when an attestation expires
message EventAttestationExpired {
  string attestation_id = 1;
  string account_address = 2;
  AttestationType type = 3;
  string expired_at = 4; // ISO 8601 timestamp
  bool auto_renewed = 5;
  string renewal_id = 6; // If auto-renewed
}

// EventComplianceReportGenerated is emitted when compliance reports are generated
message EventComplianceReportGenerated {
  string report_id = 1;
  string report_type = 2; // jurisdiction, asset_class, global, etc.
  string jurisdiction = 3; // Optional, for jurisdiction-specific reports
  string asset_class = 4; // Optional, for asset-class-specific reports
  string generated_by = 5;
  string generated_at = 6; // ISO 8601 timestamp
  string period_from = 7; // ISO 8601 timestamp
  string period_to = 8; // ISO 8601 timestamp
  string report_hash = 9;
}

// EventRuleEvaluationResult is emitted for detailed rule evaluation results
message EventRuleEvaluationResult {
  string policy_id = 1;
  string rule_name = 2;
  string account_address = 3;
  string transaction_hash = 4;
  bool passed = 5;
  string evaluated_at = 6; // ISO 8601 timestamp
  string predicate_type = 7;
  string evaluated_field = 8;
  string expected_value = 9;
  string actual_value = 10;
  string error_message = 11;
  int64 execution_time_ms = 12;
}

// EventBatchEvaluationCompleted is emitted when batch policy evaluation completes
message EventBatchEvaluationCompleted {
  string batch_id = 1;
  int32 total_evaluations = 2;
  int32 successful_evaluations = 3;
  int32 failed_evaluations = 4;
  int32 violations_found = 5;
  string started_at = 6; // ISO 8601 timestamp
  string completed_at = 7; // ISO 8601 timestamp
  int64 total_execution_time_ms = 8;
}

// EventCacheUpdated is emitted when policy cache is updated
message EventCacheUpdated {
  string cache_type = 1; // policy, attestation, etc.
  string cache_key = 2;
  string operation = 3; // set, delete, expire
  string updated_at = 4; // ISO 8601 timestamp
  int64 ttl_seconds = 5;
  int64 cache_size = 6;
}

// EventAuditLogCreated is emitted for audit trail purposes
message EventAuditLogCreated {
  string audit_id = 1;
  string operation = 2;
  string actor = 3;
  string target = 4;
  string timestamp = 5; // ISO 8601 timestamp
  string transaction_hash = 6;
  int64 block_height = 7;
  map<string, string> operation_details = 8;
}

// EventRegulatoryApprovalRequired is emitted when regulatory approval is needed
message EventRegulatoryApprovalRequired {
  string approval_id = 1;
  string account_address = 2;
  string transaction_hash = 3;
  string jurisdiction = 4;
  string asset_class = 5;
  string approval_type = 6;
  repeated string required_approvers = 7;
  string requested_at = 8; // ISO 8601 timestamp
  string reason = 9;
  int64 transaction_amount = 10;
}

// EventRegulatoryApprovalGranted is emitted when regulatory approval is granted
message EventRegulatoryApprovalGranted {
  string approval_id = 1;
  string account_address = 2;
  string transaction_hash = 3;
  string approver = 4;
  string approved_at = 5; // ISO 8601 timestamp
  string approval_notes = 6;
  repeated string conditions = 7;
  string valid_until = 8; // ISO 8601 timestamp
}
